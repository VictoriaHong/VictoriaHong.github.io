<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Victoria&#39;s Blog</title>
  <subtitle>Way To Success</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://victoriahong.com/"/>
  <updated>2016-05-14T11:42:48.000Z</updated>
  <id>http://victoriahong.com/</id>
  
  <author>
    <name>Victoria Hong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>我的大学之数字篇</title>
    <link href="http://victoriahong.com/2016/05/xinhong2/"/>
    <id>http://victoriahong.com/2016/05/xinhong2/</id>
    <published>2016-05-14T09:23:43.000Z</published>
    <updated>2016-05-14T11:42:48.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;关于西电的那些数字&quot;&gt;&lt;a href=&quot;#关于西电的那些数字&quot; class=&quot;headerlink&quot; title=&quot;关于西电的那些数字&quot;&gt;&lt;/a&gt;关于西电的那些数字&lt;/h2&gt;&lt;h3 id=&quot;Overview&quot;&gt;&lt;a href=&quot;#Overview&quot; class=&quot;headerlink&quot; title=&quot;Overview&quot;&gt;&lt;/a&gt;Overview&lt;/h3&gt;&lt;p&gt;总有一些数字，看到之后，就会让我想起我的大学时光。&lt;/p&gt;
&lt;p&gt;凌晨三时，不眠而作。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;01-11-15&quot;&gt;&lt;a href=&quot;#01-11-15&quot; class=&quot;headerlink&quot; title=&quot;01-11-15&quot;&gt;&lt;/a&gt;01-11-15&lt;/h3&gt;&lt;p&gt;这是我的班号。01代表通信工程学院。11代表11级。15代表通信工程专业15班。&lt;/p&gt;
&lt;p&gt;电院是02。通信工程是11-15班。接下来是31班，信息安全专业。41班，51班，52班记不得了。91是教改班。&lt;/p&gt;
&lt;p&gt;别问我为什么记得各种斑号，替辅导员办事的，没办法。&lt;/p&gt;
&lt;h3 id=&quot;01111532&quot;&gt;&lt;a href=&quot;#01111532&quot; class=&quot;headerlink&quot; title=&quot;01111532&quot;&gt;&lt;/a&gt;01111532&lt;/h3&gt;&lt;p&gt;这是我的学号。我们班学号似乎是431-539.再加上90x几个留学生。&lt;/p&gt;
&lt;p&gt;“532”这组数也蛮神奇的。既是我学号的结尾，又是我们15、31、卓越三个班一起点名的教室——B532。谁让我们三个班是一个导员呢。&lt;/p&gt;
&lt;h3 id=&quot;111&quot;&gt;&lt;a href=&quot;#111&quot; class=&quot;headerlink&quot; title=&quot;111&quot;&gt;&lt;/a&gt;111&lt;/h3&gt;&lt;p&gt;作为副班长，我一直说我们班一共有111名同学。我能背下来点名的顺序，却又不能认清每个人的脸。&lt;/p&gt;
&lt;p&gt;24个女同学，不算留学生女生。&lt;/p&gt;
&lt;p&gt;我们班成分复杂，由国防生、地方生、留学生组成。&lt;/p&gt;
&lt;h3 id=&quot;916，4-08&quot;&gt;&lt;a href=&quot;#916，4-08&quot; class=&quot;headerlink&quot; title=&quot;916，4-08&quot;&gt;&lt;/a&gt;916，4-08&lt;/h3&gt;&lt;p&gt;这是我们新校区门口的两个公交车号。916是直达老校区的，三块钱。4-08大概是出去玩最常坐的公交车。&lt;/p&gt;
&lt;p&gt;916故事太多了。比如超级挤啊，报站听不懂啊，堵校门闹事啊，运气不好赶上加汽啊……最多的就是去老校区赶不上校车就坐它了，搞毕设的时候一周至少跑一趟，单程司机飙车能30分钟甩到，最慢的时候就是坑爹的要加汽还堵车= =。怡丰城看电影专车。&lt;/p&gt;
&lt;p&gt;4-08带我去地铁2号线起点——韦曲站，樱花广场，西外，陕师大，转19路可以到小寨。&lt;/p&gt;
&lt;p&gt;当然还有不常坐的车，912，4-11，923，500啥的。&lt;/p&gt;
&lt;h3 id=&quot;120，8000，5000，2000，1200，800，400元&quot;&gt;&lt;a href=&quot;#120，8000，5000，2000，1200，800，400元&quot; class=&quot;headerlink&quot; title=&quot;120，8000，5000，2000，1200，800，400元&quot;&gt;&lt;/a&gt;120，8000，5000，2000，1200，800，400元&lt;/h3&gt;&lt;p&gt;看单位就知道是毛爷爷。发钱的时候最开心，每次都说”发工资啦~~“。&lt;/p&gt;
&lt;p&gt;120其实是119.9好像，重点大学学生补助，每年发一次，少得可怜。&lt;/p&gt;
&lt;p&gt;8000是国家奖学金，一年一次，一次一人。跟国家奖学金有关的故事太多了，放在事件篇里讲吧。&lt;/p&gt;
&lt;p&gt;5000是国家励志奖学金、特殊奖学金，一年一次，一次五人左右。&lt;/p&gt;
&lt;p&gt;1200是校一等奖学金。800二等。400三等以及单项奖。&lt;/p&gt;
&lt;p&gt;我得过的奖学金大概能抵掉四年学费（7200&lt;em&gt;4=28800）吧。8000&lt;/em&gt;1+5000&lt;em&gt;2+1200&lt;/em&gt;2=20400。哎呦还差点。算了吧，支援西部高校建设了。&lt;/p&gt;
&lt;h3 id=&quot;85，89，90&quot;&gt;&lt;a href=&quot;#85，89，90&quot; class=&quot;headerlink&quot; title=&quot;85，89，90&quot;&gt;&lt;/a&gt;85，89，90&lt;/h3&gt;&lt;p&gt;前三年累计均分。&lt;/p&gt;
&lt;p&gt;想法也从保内到保外到出国。&lt;/p&gt;
&lt;h3 id=&quot;”985”-“211”&quot;&gt;&lt;a href=&quot;#”985”-“211”&quot; class=&quot;headerlink&quot; title=&quot;”985” “211”&quot;&gt;&lt;/a&gt;”985” “211”&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;我们不是三本院校&lt;/strong&gt;！！！ 略讽刺。&lt;/p&gt;
&lt;h3 id=&quot;丁香13号楼120左室&quot;&gt;&lt;a href=&quot;#丁香13号楼120左室&quot; class=&quot;headerlink&quot; title=&quot;丁香13号楼120左室&quot;&gt;&lt;/a&gt;丁香13号楼120左室&lt;/h3&gt;&lt;p&gt;竹园1-4号楼。海棠5-10号楼.丁香11-15号楼。&lt;/p&gt;
&lt;p&gt;我住在丁香宿舍区唯一的女生楼13号楼。地下室一般阴森的一楼。&lt;/p&gt;
&lt;p&gt;120是楼梯下到一楼口处的寝室。大一大二因为门口放了整层楼的垃圾桶，虽然扔垃圾是方便一点，但是夏天也是够酸爽。大三之后各层的垃圾桶集中起来移到楼外面了，我们宿舍就自然而然成垃圾堆了。&lt;/p&gt;
&lt;p&gt;左室不得不说是三个小寝室中最好的。右室冬冷夏热。中室面对厕所，略吵。左室唯一的不好就是离大门嘴近，老得给人开门。左室最好的是窗户躲在树后面还能晒到太阳。&lt;/p&gt;
&lt;p&gt;海棠和竹园都是8人的两室一厅格局。小屋有自己的厕所。我最喜欢海棠宿舍。&lt;/p&gt;
&lt;p&gt;通院男生都住在14号楼。不知道为啥我老以为自己住14号。&lt;/p&gt;
&lt;h3 id=&quot;大活511，竹园2号楼二区2XX，丁香14号楼200&quot;&gt;&lt;a href=&quot;#大活511，竹园2号楼二区2XX，丁香14号楼200&quot; class=&quot;headerlink&quot; title=&quot;大活511，竹园2号楼二区2XX，丁香14号楼200&quot;&gt;&lt;/a&gt;大活511，竹园2号楼二区2XX，丁香14号楼200&lt;/h3&gt;&lt;p&gt;这都是通院学生组织办活动的房间。&lt;/p&gt;
&lt;p&gt;大活511其实没去过几次。科协双旦晚会，出国留学讲座，其他不记得了。&lt;/p&gt;
&lt;p&gt;竹园2号楼二区2XX。大一刚进科协和学生会的时候，一周里有三天开会，基本都在这里。谁叫负责人住竹园呢。于是我练就了20分钟从宿舍走到会议室奇功。轮到我们执政了就搬到丁香去了。&lt;/p&gt;
&lt;p&gt;丁香14号楼200估计是我四年常常去男生楼的全部原因。班委开会，导员开会，下达个什么通知，都在这里。&lt;/p&gt;
&lt;h3 id=&quot;信远二区505，B楼601，C楼215，D楼211，E楼二区三区，图书馆305、105&quot;&gt;&lt;a href=&quot;#信远二区505，B楼601，C楼215，D楼211，E楼二区三区，图书馆305、105&quot; class=&quot;headerlink&quot; title=&quot;信远二区505，B楼601，C楼215，D楼211，E楼二区三区，图书馆305、105&quot;&gt;&lt;/a&gt;信远二区505，B楼601，C楼215，D楼211，E楼二区三区，图书馆305、105&lt;/h3&gt;&lt;p&gt;这都是上课的教室或者实验室。&lt;/p&gt;
&lt;p&gt;信远二区505，英语中级二班，大一，黄珂。上英语课最开心的是可以听到老师流利的口语，下课可以去竹园抢三块五的盖浇饭；最不开心的是，爬五楼简直是要人命。&lt;/p&gt;
&lt;p&gt;B楼601，迷之教室，有人甚至不知道它的存在。&lt;/p&gt;
&lt;p&gt;C楼215，我最爱的自习室。位处一层正中，离厕所和开水最近，二楼不高不低。&lt;/p&gt;
&lt;p&gt;D楼211，大一军事理论课的教室，全院500多人一起上课都绰绰有余的超大阶梯教室。&lt;/p&gt;
&lt;p&gt;E楼二区是数字电路、模拟电路实验室，三区是专业课的实验室。最喜欢上实验课，最不喜欢写实验报告。&lt;/p&gt;
&lt;p&gt;图书馆305、105是我常在图书馆自习的房间。去图书馆不是去阅读的吗？唉，西电学风优良。&lt;/p&gt;
&lt;h3 id=&quot;80周年&quot;&gt;&lt;a href=&quot;#80周年&quot; class=&quot;headerlink&quot; title=&quot;80周年&quot;&gt;&lt;/a&gt;80周年&lt;/h3&gt;&lt;p&gt;2011年，我入学，刚好是西电80周年校庆。100周年校庆是不是要回去看看？&lt;/p&gt;
&lt;h3 id=&quot;8：30，11：30&quot;&gt;&lt;a href=&quot;#8：30，11：30&quot; class=&quot;headerlink&quot; title=&quot;8：30，11：30&quot;&gt;&lt;/a&gt;8：30，11：30&lt;/h3&gt;&lt;p&gt;早上7点十几分，我一般先到C楼自习室晨读，8点25匆匆赶到教室点名。8点30开始上课。12点下课。&lt;/p&gt;
&lt;p&gt;晚上11点30准时熄灯。断电不断网，呵呵。夏天最热的时候会通宵供电。&lt;/p&gt;
&lt;h3 id=&quot;一毛钱，20块钱&quot;&gt;&lt;a href=&quot;#一毛钱，20块钱&quot; class=&quot;headerlink&quot; title=&quot;一毛钱，20块钱&quot;&gt;&lt;/a&gt;一毛钱，20块钱&lt;/h3&gt;&lt;p&gt;复印单面一毛一张，双面双倍。出了学校，哪里还能找到这么便宜的复印店。&lt;/p&gt;
&lt;p&gt;与之对比的是学校档案馆。申请出国的成绩单、学位证、毕业证翻译费用真是坑死人。20块钱是加印一份的费用。弄这些来来回回花了我小一千块吧。&lt;/p&gt;
&lt;h3 id=&quot;5块钱&quot;&gt;&lt;a href=&quot;#5块钱&quot; class=&quot;headerlink&quot; title=&quot;5块钱&quot;&gt;&lt;/a&gt;5块钱&lt;/h3&gt;&lt;p&gt;地铁二号线，5块钱，从起点站坐到终点站。&lt;/p&gt;
&lt;p&gt;地贴差不多一个小时，到地铁站公交车40分钟，从宿舍到公交站走路20分钟。高铁90分钟或者动车120分钟，打车回家2-分钟。&lt;/p&gt;
&lt;p&gt;算来算去到高铁站的时间都比坐高铁回家慢。&lt;/p&gt;
&lt;p&gt;四年攒了一盒子蓝色车票，享受了四年八次学生票八五折。后来铁路局良心发现，票价降过五毛钱。&lt;/p&gt;
&lt;h3 id=&quot;通院杯足球赛冠军&quot;&gt;&lt;a href=&quot;#通院杯足球赛冠军&quot; class=&quot;headerlink&quot; title=&quot;通院杯足球赛冠军&quot;&gt;&lt;/a&gt;通院杯足球赛冠军&lt;/h3&gt;&lt;p&gt;我们大一进了八强，大二夺冠，大三季军，大四亚军。辉煌的战绩，感谢球队的每个人，錁哥，周神，蛋哥，艾瑞米，约瑟，凯撒，维克托，楠哥，嘉哥，老党，孙鹤，CBY，滔哥，等等。作为不称职的啦啦队长，向队长王錁请罪。&lt;/p&gt;
&lt;h3 id=&quot;最长的寒假，最短的暑假&quot;&gt;&lt;a href=&quot;#最长的寒假，最短的暑假&quot; class=&quot;headerlink&quot; title=&quot;最长的寒假，最短的暑假&quot;&gt;&lt;/a&gt;最长的寒假，最短的暑假&lt;/h3&gt;&lt;p&gt;寒假一年比一年长，暑假因此一年比一年短。&lt;/p&gt;
&lt;h3 id=&quot;2011-8-21-–-2015-7-9&quot;&gt;&lt;a href=&quot;#2011-8-21-–-2015-7-9&quot; class=&quot;headerlink&quot; title=&quot;2011.8.21 – 2015.7.9&quot;&gt;&lt;/a&gt;2011.8.21 – 2015.7.9&lt;/h3&gt;&lt;p&gt;19岁。22岁。&lt;/p&gt;
&lt;p&gt;开始。结束。&lt;/p&gt;
&lt;p&gt;你好，再见。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;关于西电的那些数字&quot;&gt;&lt;a href=&quot;#关于西电的那些数字&quot; class=&quot;headerlink&quot; title=&quot;关于西电的那些数字&quot;&gt;&lt;/a&gt;关于西电的那些数字&lt;/h2&gt;&lt;h3 id=&quot;Overview&quot;&gt;&lt;a href=&quot;#Overview&quot; class=&quot;headerlink&quot; title=&quot;Overview&quot;&gt;&lt;/a&gt;Overview&lt;/h3&gt;&lt;p&gt;总有一些数字，看到之后，就会让我想起我的大学时光。&lt;/p&gt;
&lt;p&gt;凌晨三时，不眠而作。&lt;/p&gt;
    
    </summary>
    
      <category term="Life" scheme="http://victoriahong.com/categories/Life/"/>
    
      <category term="我的大学" scheme="http://victoriahong.com/categories/Life/%E6%88%91%E7%9A%84%E5%A4%A7%E5%AD%A6/"/>
    
    
      <category term="Blog" scheme="http://victoriahong.com/tags/Blog/"/>
    
      <category term="西电" scheme="http://victoriahong.com/tags/%E8%A5%BF%E7%94%B5/"/>
    
  </entry>
  
  <entry>
    <title>Bittiger 硅谷之路 10</title>
    <link href="http://victoriahong.com/2016/05/Bittiger-%E7%A1%85%E8%B0%B7%E4%B9%8B%E8%B7%AF10/"/>
    <id>http://victoriahong.com/2016/05/Bittiger-硅谷之路10/</id>
    <published>2016-05-13T04:45:38.000Z</published>
    <updated>2016-05-13T05:37:20.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;深入浅出BigTable&quot;&gt;&lt;a href=&quot;#深入浅出BigTable&quot; class=&quot;headerlink&quot; title=&quot;深入浅出BigTable&quot;&gt;&lt;/a&gt;深入浅出BigTable&lt;/h2&gt;&lt;h3 id=&quot;Overview&quot;&gt;&lt;a href=&quot;#Overview&quot; class=&quot;headerlink&quot; title=&quot;Overview&quot;&gt;&lt;/a&gt;Overview&lt;/h3&gt;&lt;p&gt;  NoSQL db&lt;/p&gt;
&lt;p&gt;  使用&lt;k, v=&quot;&quot;&gt;的物理结构存储超大表&lt;/k,&gt;&lt;/p&gt;
&lt;p&gt;  BigTable吃内存，GFS吃硬盘&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;文件内快速查询&quot;&gt;&lt;a href=&quot;#文件内快速查询&quot; class=&quot;headerlink&quot; title=&quot;文件内快速查询&quot;&gt;&lt;/a&gt;文件内快速查询&lt;/h3&gt;&lt;p&gt;Table = a list of sorted &lt;key, value=&quot;&quot;&gt; pairs&lt;/key,&gt;&lt;/p&gt;
&lt;h3 id=&quot;保存很大的表&quot;&gt;&lt;a href=&quot;#保存很大的表&quot; class=&quot;headerlink&quot; title=&quot;保存很大的表&quot;&gt;&lt;/a&gt;保存很大的表&lt;/h3&gt;&lt;p&gt;A big table = a list of tablets&lt;/p&gt;
&lt;p&gt;A tablet = a list of sorted &lt;key, value=&quot;&quot;&gt; pairs&lt;/key,&gt;&lt;/p&gt;
&lt;p&gt;表内有序，表间无序&lt;/p&gt;
&lt;h3 id=&quot;保存超大表&quot;&gt;&lt;a href=&quot;#保存超大表&quot; class=&quot;headerlink&quot; title=&quot;保存超大表&quot;&gt;&lt;/a&gt;保存超大表&lt;/h3&gt;&lt;p&gt;再拆出来一层小小表&lt;/p&gt;
&lt;h3 id=&quot;如何写数据&quot;&gt;&lt;a href=&quot;#如何写数据&quot; class=&quot;headerlink&quot; title=&quot;如何写数据&quot;&gt;&lt;/a&gt;如何写数据&lt;/h3&gt;&lt;p&gt;不直接写入硬盘&lt;/p&gt;
&lt;p&gt;写入 memTable (内存表)来加速: &lt;key, value=&quot;&quot;&gt; pairs&lt;/key,&gt;&lt;/p&gt;
&lt;p&gt;A tablet = memTable + a list of smallTables&lt;/p&gt;
&lt;p&gt;当内存表满了（64MB），写入硬盘。&lt;/p&gt;
&lt;h3 id=&quot;避免数据丢失&quot;&gt;&lt;a href=&quot;#避免数据丢失&quot; class=&quot;headerlink&quot; title=&quot;避免数据丢失&quot;&gt;&lt;/a&gt;避免数据丢失&lt;/h3&gt;&lt;p&gt;内存可能丢失&lt;/p&gt;
&lt;p&gt;写入 memTable 的同时，写入硬盘内 tableLog。&lt;/p&gt;
&lt;p&gt;A tablet = memTable + a list of smallTables + log&lt;/p&gt;
&lt;h3 id=&quot;如何读数据&quot;&gt;&lt;a href=&quot;#如何读数据&quot; class=&quot;headerlink&quot; title=&quot;如何读数据&quot;&gt;&lt;/a&gt;如何读数据&lt;/h3&gt;&lt;p&gt;写策略造成：需要查找所有的小小表和memTable, 很慢&lt;/p&gt;
&lt;p&gt;加速：+ index + bloomfilter&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;深入浅出BigTable&quot;&gt;&lt;a href=&quot;#深入浅出BigTable&quot; class=&quot;headerlink&quot; title=&quot;深入浅出BigTable&quot;&gt;&lt;/a&gt;深入浅出BigTable&lt;/h2&gt;&lt;h3 id=&quot;Overview&quot;&gt;&lt;a href=&quot;#Overview&quot; class=&quot;headerlink&quot; title=&quot;Overview&quot;&gt;&lt;/a&gt;Overview&lt;/h3&gt;&lt;p&gt;  NoSQL db&lt;/p&gt;
&lt;p&gt;  使用&lt;k, v&gt;的物理结构存储超大表&lt;/p&gt;
&lt;p&gt;  BigTable吃内存，GFS吃硬盘&lt;/p&gt;
    
    </summary>
    
      <category term="Tech Notes" scheme="http://victoriahong.com/categories/Tech-Notes/"/>
    
    
      <category term="Bittiger" scheme="http://victoriahong.com/tags/Bittiger/"/>
    
      <category term="Notes" scheme="http://victoriahong.com/tags/Notes/"/>
    
      <category term="Structure" scheme="http://victoriahong.com/tags/Structure/"/>
    
      <category term="硅谷之路" scheme="http://victoriahong.com/tags/%E7%A1%85%E8%B0%B7%E4%B9%8B%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>Bittiger 硅谷之路 9</title>
    <link href="http://victoriahong.com/2016/05/Bittiger-%E7%A1%85%E8%B0%B7%E4%B9%8B%E8%B7%AF9/"/>
    <id>http://victoriahong.com/2016/05/Bittiger-硅谷之路9/</id>
    <published>2016-05-12T22:40:36.000Z</published>
    <updated>2016-05-13T00:13:03.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;深入浅出-Google-File-System&quot;&gt;&lt;a href=&quot;#深入浅出-Google-File-System&quot; class=&quot;headerlink&quot; title=&quot;深入浅出 Google File System&quot;&gt;&lt;/a&gt;深入浅出 Google File System&lt;/h2&gt;&lt;h3 id=&quot;Overview&quot;&gt;&lt;a href=&quot;#Overview&quot; class=&quot;headerlink&quot; title=&quot;Overview&quot;&gt;&lt;/a&gt;Overview&lt;/h3&gt;&lt;p&gt;Google 三篇论文：Google File System, BigTable, MapReduce.&lt;/p&gt;
&lt;p&gt;Structure:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/aEE7aX1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;Store-a-File&quot;&gt;&lt;a href=&quot;#Store-a-File&quot; class=&quot;headerlink&quot; title=&quot;Store a File&quot;&gt;&lt;/a&gt;Store a File&lt;/h3&gt;&lt;p&gt;Disk 有一部分存文件的 metadata，包括文件属性（name, createdTime, size）以及索引。&lt;/p&gt;
&lt;p&gt;Block 存文件具体内容 offset。一个 block 大小为 1024 bytes。&lt;/p&gt;
&lt;h3 id=&quot;Store-a-Big-File&quot;&gt;&lt;a href=&quot;#Store-a-Big-File&quot; class=&quot;headerlink&quot; title=&quot;Store a Big File&quot;&gt;&lt;/a&gt;Store a Big File&lt;/h3&gt;&lt;p&gt;用 chunk 来存。一个 chunk 大小为 64 MB。等于 64K 个 block。&lt;/p&gt;
&lt;p&gt;Advantages: less metadata; less data flow.&lt;/p&gt;
&lt;p&gt;Disadvantages: small files waste space.&lt;/p&gt;
&lt;h3 id=&quot;Store-supper-big-file&quot;&gt;&lt;a href=&quot;#Store-supper-big-file&quot; class=&quot;headerlink&quot; title=&quot;Store supper big file&quot;&gt;&lt;/a&gt;Store supper big file&lt;/h3&gt;&lt;p&gt;索引放在 master 设备上，记录 chunk server 和 offset。&lt;/p&gt;
&lt;p&gt;Disadvantages: chunk server 的变化要通知 master。这样加重了 master 负担。&lt;/p&gt;
&lt;p&gt;Solution: master 不记录每块数据的 offset，只记录在哪个 chunk server 上。低耦合。&lt;/p&gt;
&lt;h3 id=&quot;Find-damaged-data&quot;&gt;&lt;a href=&quot;#Find-damaged-data&quot; class=&quot;headerlink&quot; title=&quot;Find damaged data&quot;&gt;&lt;/a&gt;Find damaged data&lt;/h3&gt;&lt;p&gt;每个 block 存一个 32 bit 的 checksum。读取时验证一下。&lt;/p&gt;
&lt;h3 id=&quot;Duplicate-Chunk-Server&quot;&gt;&lt;a href=&quot;#Duplicate-Chunk-Server&quot; class=&quot;headerlink&quot; title=&quot;Duplicate Chunk Server&quot;&gt;&lt;/a&gt;Duplicate Chunk Server&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;3 replicates&lt;/li&gt;
&lt;li&gt;跨机架、跨中心：数据中心建立在不同地方，每个地方又有放在不同机架上的副本。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Recover&quot;&gt;&lt;a href=&quot;#Recover&quot; class=&quot;headerlink&quot; title=&quot;Recover&quot;&gt;&lt;/a&gt;Recover&lt;/h3&gt;&lt;p&gt;Get help from master to get right data when find damaged data.&lt;/p&gt;
&lt;p&gt;Master monitors all slaves’ heart-beat to recognize dead one.&lt;/p&gt;
&lt;p&gt;Recover strategy based on the number of alive duplicates. 副本少的先修复。&lt;/p&gt;
&lt;h3 id=&quot;Deal-with-hot-spot&quot;&gt;&lt;a href=&quot;#Deal-with-hot-spot&quot; class=&quot;headerlink&quot; title=&quot;Deal with hot spot&quot;&gt;&lt;/a&gt;Deal with hot spot&lt;/h3&gt;&lt;p&gt;Duplicate chunk server based on disk and bandwidth utilization.&lt;/p&gt;
&lt;h3 id=&quot;How-to-read-a-file&quot;&gt;&lt;a href=&quot;#How-to-read-a-file&quot; class=&quot;headerlink&quot; title=&quot;How to read a file&quot;&gt;&lt;/a&gt;How to read a file&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Read:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/oJEUmF6.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;key points:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;chunk index 是可以由 client 自己计算出来的，大小固定的。&lt;/li&gt;
&lt;li&gt;找到最近的 chunk server。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Write:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/ZtpT1gn.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;key points:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主 chunk server 是随机选的，只对这一次的操作负责。&lt;/li&gt;
&lt;li&gt;要写的东西是发给最近的 chunk server 而不是主 server。&lt;/li&gt;
&lt;li&gt;chunk server 之间传输速度很快。分级传递即可，不需要并发。&lt;/li&gt;
&lt;li&gt;主 server 跟 client 通讯，告知全部 cache 好了，再通知各个从属 server 一起写。先缓存再写入可以消除大部分写失败。&lt;/li&gt;
&lt;li&gt;发生写错误的时候，交给上级的 GFS master 去处理。下级的功能越单一越好。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;深入浅出-Google-File-System&quot;&gt;&lt;a href=&quot;#深入浅出-Google-File-System&quot; class=&quot;headerlink&quot; title=&quot;深入浅出 Google File System&quot;&gt;&lt;/a&gt;深入浅出 Google File System&lt;/h2&gt;&lt;h3 id=&quot;Overview&quot;&gt;&lt;a href=&quot;#Overview&quot; class=&quot;headerlink&quot; title=&quot;Overview&quot;&gt;&lt;/a&gt;Overview&lt;/h3&gt;&lt;p&gt;Google 三篇论文：Google File System, BigTable, MapReduce.&lt;/p&gt;
&lt;p&gt;Structure:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/aEE7aX1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Tech Notes" scheme="http://victoriahong.com/categories/Tech-Notes/"/>
    
    
      <category term="Bittiger" scheme="http://victoriahong.com/tags/Bittiger/"/>
    
      <category term="Notes" scheme="http://victoriahong.com/tags/Notes/"/>
    
      <category term="Structure" scheme="http://victoriahong.com/tags/Structure/"/>
    
      <category term="硅谷之路" scheme="http://victoriahong.com/tags/%E7%A1%85%E8%B0%B7%E4%B9%8B%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>Question to Ask Your Interviewer (Translation)</title>
    <link href="http://victoriahong.com/2016/05/question-to-ask-your-interviewer-translation/"/>
    <id>http://victoriahong.com/2016/05/question-to-ask-your-interviewer-translation/</id>
    <published>2016-05-12T06:31:59.000Z</published>
    <updated>2016-05-13T04:33:09.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;如何向面试官提问&quot;&gt;&lt;a href=&quot;#如何向面试官提问&quot; class=&quot;headerlink&quot; title=&quot;如何向面试官提问&quot;&gt;&lt;/a&gt;如何向面试官提问&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;原文链接 &lt;a href=&quot;https://rkoutnik.com/articles/Questions-to-ask-your-interviewer.html?utm_source=wanqu.co&amp;amp;utm_campaign=Wanqu+Daily&amp;amp;utm_medium=website&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Questions to ask your interviewer&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;blockquote&gt;
&lt;p&gt;Last time, we talked about how to design a technical interview as a filter, starting primarily with determining what sort of person is “good”. This time, I’m turning the tables to look at the other side of things. Let’s talk about some questions you can use to determine if a company is where you want to work. The tech world is a seller’s market for talent. It’s difficult to get a good read on a company from the information you have pre-interview. Companies of all shapes and sizes want to throw you through their gauntlet. Some interviewers will say whatever it takes to get you to sign, others look at their company with rose-tinted glasses. Neither will help you find a job you’ll love. Most questions are easily dodged (“What’s the worst part of this job?”, “There’s too much to do but you’ll fix that!”).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;上次，我们从如何判断什么算“好”的技术人员，讨论了如何通过技术面试筛选求职者。这一次，我们转换角色，来谈谈一些你可以用来决定你是否想在某个公司工作。科技界是卖方市场。在面试前，从你了解的信息中很难对一个公司有准确的认识。形形色色各种公司都为你设置了重重关卡。一些面试官为了让你签字而信口开河，另一些则是对公司进行了美化。他们都无法帮你找到你喜爱的工作。多数问题很容易避开，比如，“这个工作哪方面不太好？”，“工作比较重但是你一定能搞定。”&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;On the other hand, an attentive interviewer will se these questions as a positive - you’re the sort of person who thinks things through and knows what they’re after. This also helps the interviewer determine what you’re looking for and tailor the rest of the interview to that.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;另一方面，一个细心的面试官认为这些问题是加分项–因为你是那种认真思考事情来龙去脉的人。这也帮助面试官了解你的诉求并并对接下来的面试进行相应调整。&lt;/p&gt;
&lt;h3 id=&quot;Why-general-questions-fail-为什么普通问题不可行&quot;&gt;&lt;a href=&quot;#Why-general-questions-fail-为什么普通问题不可行&quot; class=&quot;headerlink&quot; title=&quot;Why general questions fail 为什么普通问题不可行&quot;&gt;&lt;/a&gt;Why general questions fail 为什么普通问题不可行&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Many traditional questions fall short because the interviewer isn’t incentivised to provide a candid answer. Consider: “Do you trust management?” “Trust” is a strong word with some emotional charge. If the interviewer expresses doubts, that may be enough to kill the candidate’s interest altogether. No one wants to be the person who lost a promising candidate, so a little white lie emerges. “Sure!” they say. Two months into the job you realize they actually meant you could trust management to get paychecks in on time (and not much else).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;许多传统问题的不足之处在于面试官并不能够坦白回答。试想一下“你信任管理人员吗”这个问题。信任是一个情感色彩较强的词汇。没人想让自己损失一名优秀的候选人，所以一些善意的谎言就出现了。面试官回答是“当然信任啊”。入职两个月后你才猛然醒悟其实他们指的是信任管理人员会按时发工资，再无其他。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Instead, use a specific question or ask something general and drill down for details. In the above example we could instead ask “What is your management’s vision?” This doesn’t cover all of the bases we had previously but the answer is more likely to be actionable. It tells us how good leaders are at communicating where they want to go. It gives a window into the future of the company - do they just want to get bought? Is there just vague “Change the world” promises?&lt;br&gt;Many engineers can optimistically gloss over problems.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;相反地，使用具体的问题或者问一些宽泛的问题然后追问细节。在上面的例子中，我们可以换作问“管理人员对未来的展望”。这个问题虽不能完全等价于先前的问题，但是答案往往更具行动性。它告诉我们领导们是否善于传达他们的目标。它为我们了解公司前景提供了一个窗口–他们只想被收购？还是只有“改变世界”这样含糊的说词？&lt;/p&gt;
&lt;p&gt;许多工程师们会以乐观的说辞搪塞问题。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Q: How does your team overcome challenges?&lt;br&gt;A: I believe in clear, open communication and have noticed that in general everyone at Initech seems to as well. Transparency has helped my team overcome obstacles and move forward together.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;问：你的团队如何战胜挑战？&lt;/p&gt;
&lt;p&gt;答：我信任清晰和敞开的沟通，Initech 中的每一位员工都信奉这一点。透明帮助我的团队克服困难、共同前进。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Q: Can you give me an example of your team overcoming a difficult obstacle recently?&lt;br&gt;A: Well, I guess we talk about blockers at our daily standups.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;问：你能给我举个你们团队最近克服困难的例子吗？&lt;/p&gt;
&lt;p&gt;答：好吧，我想我们大概是在聊我们每天站立会议都会讨论的困难。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Getting concrete examples means you get past the marketing fluff to a company’s real values.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;得到具体的例子表明你透过市场的表象深入到了公司的真正内在。&lt;/p&gt;
&lt;h3 id=&quot;Finding-red-flags-发现潜在问题&quot;&gt;&lt;a href=&quot;#Finding-red-flags-发现潜在问题&quot; class=&quot;headerlink&quot; title=&quot;Finding red flags 发现潜在问题&quot;&gt;&lt;/a&gt;Finding red flags 发现潜在问题&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;What are you hoping I’ll change?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;问：你希望我为公司带来什么改变？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;There are two things I’m looking for in this question: another angle on the job description and wishful thinking. Job descriptions tell part of the story. Now that you’re in for an interview, it’s time to get the other half. This is a great time to talk about potential projects, advancement, and how you in particular will fit in. If the interview seems tense, asking this question can lighten the mood a bit. On the other hand, I’ve often heard things like “Tests are important but we don’t have them. We’re hoping you’ll be able to help out with that.” Did you catch the wishful thinking there? If tests are important then the team should already have a test suite. The interviewer is expecting you to change the company culture without any power to do so. The interviewer isn’t twirling their moustache Snidely Whiplash-style, expecting massive change from a new hire - it’s just the optimism that curses every engineer.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我想从这个问题中了解两点：另一个角度的职位描述和可能存在的过分期待。&lt;/p&gt;
&lt;p&gt;职位描述只是一方面。既然你正身处面试之中，是时候了解另一半了。这是一个探讨未来项目、晋升机会以及你在其中的确切角色的大好机会。如果面试很紧张，问这个问题可以让你的心情稍微放松一些。&lt;/p&gt;
&lt;p&gt;另一方面，我时常听到像这样的回答“测试很重要但是我们一直没有。我们希望你能帮我们解决。”你意识到对你的期待了吗？如果测试很重要，那团队肯定早就写好了一套测试。面试官希望你不费吹灰之力就改变公司的文化。面试官不是一边狞笑着卷着自己的小胡子（译者注：Snidely Whiplash指的是动画片里坏人，他有弯弯的胡子），一边期望一个新员工能让整个公司焕然一新–而事实上这只是诅咒着每个工程师的乐观主义。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;How often are you pulled off your primary task?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;问：你每隔多久会偏离主要的工作内容？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It seems obvious that someone with the title of “Software Engineer” would spend most of their time engineering software. In some places, a more accurate title would be “meeting attender who writes code on occasion.” Other places expect developers to expand beyond their role, creating their own wireframes or deployment strategies. Even worse, your job requirements could change dramatically. A startup hired one of my friends as a full-stack engineer and he spent most of his time managing ad campaigns on social networks.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;显而易见，具有“软件工程师”头衔的人应该把大部分时间花在开发软件上。然而在一些地方，“偶尔写代码的与会人员”才是更准确地称号。另一些地方则是期待开发者们能延伸自己的职责，创建自己的框图和部署策略。更糟糕的情况是，你的工作需求可能会发生巨大的变化。一个创业公司雇佣我的一个朋友当全栈工程师，结果他把大部分时间花在管理社交网络上的广告战上去了。&lt;/p&gt;
&lt;h3 id=&quot;Technical-技术&quot;&gt;&lt;a href=&quot;#Technical-技术&quot; class=&quot;headerlink&quot; title=&quot;Technical 技术&quot;&gt;&lt;/a&gt;Technical 技术&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;How does your development process work?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;问：你们的开发流程是怎样的？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This question is essentially a simple Joel test. Lack of source control, tests &amp;amp; code review are all smells that shouldn’t nix the company altogether but will need consideration.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这个问题本质上是个简单的&lt;a href=&quot;http://www.joelonsoftware.com/articles/fog0000000043.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Joel测试&lt;/a&gt;。缺少版本控制、测试和代码审查都警示着你，即使不完全放弃这家公司，也需要仔细斟酌一番。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;How does your deployment process work?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;问：你们部署代码的流程是怎洋的？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I once joined a company without asking this question and to my dismay discovered the answer was “ssh into all of our servers (one by one) and manually copy/paste the files”. This should be a gimme for any modern company.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我曾有一次没有问这个问题就加入了一个公司。我十分沮丧地发现，问题的答案竟然是“逐个ssh到所有的服务器中，手动复制粘贴文件。”这应该是任何一家现代公司都不会真的做的事。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A basic deployment process should be: 1. able to roll back；2. easy to see what changed；3. deterministic. Even &lt;code&gt;git pull&lt;/code&gt; suffices here (though only as a bare minimum).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;一个基本的部署流程应该是，能够回滚，能够发现有什么变化，确定的。&lt;code&gt;git pull&lt;/code&gt;姑且不算，这仅仅是最低要求。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The last person who was fired - why did that happen? Do you think it was for a reason other than the official one?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;问：最近被裁掉的那个人是因为什么被裁了？你认为除了官方原因之外，还有别的隐情吗？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This is tricky and I wouldn’t ask it at every interview (in fact, I received pushback on it from almost every reviewer). Often there’s some difference between the official reason for a firing (if management provides one at all) and what the rank and file suspect. Other times it’s “This guy was a total jackhole” - a great sign that management is willing to prune a branch for the benefit of the tree. If “firing” seems a step too far, substitute “disciplined” or the like.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这个问题很具有技巧性，我不会在每个面试中都问。实际上，基本每个面试官都把这个问题扔还给我了。通常裁员的官方原因（如果管理者给出了）和阶级以及文件带来的猜想总有些不同之处。其他时候的理由则是“这人是个混蛋”–管理者想为了树好而修枝剪叶。&lt;/p&gt;
&lt;p&gt;若是开除太过严重了，可以用批评之类的词。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;What tools does your team use to communicate?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;问：你们团队用什么工具交流？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;For virtually all information, async communication methods trump synchronous ones. Async tools like chat, bug trackers, email and the like send information so that the receiver can pick it up on their own time. Synchronous communication (face-to-face) means that someone’s going to get interrupted. It also means that remote workers often get pulled out of the loop.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;对于事实上所有信息，异步通信都胜过同步通信。异步工具比如对话、错误追踪、邮件和其他发送信息的方式使得接收者可以自己决定接收时间。同步通信（面对面沟通）意味着有一方得被打扰。同时意味着远程工作者常被强制退出。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A good follow up is “How was the last big announcement handled?” It’s common for upper management to flub communication and expect the telephone line to make sure everyone’s properly informed. Big events where everyone gets the same info (or heck, even an email blast) are important.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;你可以接着问“上个重要的通知是怎么处理的？”上层管理人员扰乱通讯并诉诸于电话线来确保每个人都被通知到了的行为是很普遍的。确保每个人都知道（或者，甚至是邮件轰炸）的大事件是非常重要的。&lt;/p&gt;
&lt;h3 id=&quot;Culture-文化&quot;&gt;&lt;a href=&quot;#Culture-文化&quot; class=&quot;headerlink&quot; title=&quot;Culture 文化&quot;&gt;&lt;/a&gt;Culture 文化&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Imagine a realm where we’re expected to make decisions on a daily or weekly basis. Let’s say you and I disagree on an important decision. We can’t reach a consensus and have to agree to disagree. What then? Whose approach wins?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;想想一个场景，我们需要每天或者每周作出决定。假设你跟我在一个重要决定上产生了分歧。我们找不到一个中庸的办法，要么同意，要么不同意。接下来会发生什么？谁会最终取得胜利？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Here we’re measuring how autocratic our potential employer is. Flatness is the hip thing to be these days and companies want to show off how much autonomy their engineers get. You want to dig beyond the dazzle. If the answer seems flaky, ask for a real-life example. It’s a red flag if the interviewer has trouble coming up with an example that fits the company’s claims.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这里我们是在测试我们的潜在雇主有多独裁。扁平化最近很流行，公司们都想展示他们的工程师所拥有的自主权。而你在炫目的表象下探求真实。如果答案不可靠，就要一个真实生活的例子。如果面试官很难举出一个满足公司宣扬的种种的例子，这就是一个警示。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;What does it take to succeed at this company beyond “hard work”?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;问：除了努力工作之外，如何在公司中做出一番业绩？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We’re trying to separate the marketing from the real culture. Virtually every interviewer will start their answer with chaff like “hard work, being smart, writing good code”. Go deeper and find the difference between “general expectations” and what this company uniquely wants from you. Good answers will be specific. Great answers will be tailored to you as a candidate.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们努力将营销从实际文化中剥离。实际上每个面试官都会从“努力工作、够聪明，代码质量好”这些无价值的方面开始回答。深入探究，找到“普遍期望”和对你的特殊期望的不同之处。好的答案是具体明确的。更好的答案是为你量身定做的。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If I’m not meeting expectations, how will I know?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;问：如果我无法满足公司对我的预期，我怎么知道呢？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You can’t improve without feedback of both kinds. I’ve worked at companies that would rather an engineer drag along, closing tickets than dare to ask them to improve and risk them leaving. Others can be sudden - quick firings without much warning. You’re looking for a company with a culture of candid feedback. Everything works better when people are honest with each other. A workplace that values consistent, high-quality feedback means you’ll improve your technical skillset and be surrounded by constantly-improving folks.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果双方都没有反馈，你是无法进步的。我曾就职于一些宁愿让工程师将错就错也不敢要求他们提升、担心他们辞职的公司。其他公司可能是不给太多警告就突然迅速裁人。你要找能够坦白地给与你反馈的公司。当人与人之间真诚相待，事情才能做得更好。提倡持续的高品质的反馈的工作地点意味着你将会提升自己的技术水平并有一群不断进步的同伴。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;How will I get better at my job?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;问：在工作中我如何提升？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;There’s a lot of great answers to this question: training budget, conferences, Friday tech talks, mentoring program (and more!). A good answer is anything beyond a shrug or minor platitudes. In those cases it’s very likely you’ll be left to your own devices in improving.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;对这个问题有很多很好的答案：培训预算、峰会、周五的技术讲座、导师项目等等。好的答案远不止一个耸肩或者是短小的老生常谈。这些情况下，你很有可能需要自求他法。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Finally, the most important question of all:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;最后，最重要的一个问题：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The tortoise lays on its back, its belly baking in the hot sun, beating its legs trying to turn itself over. But it can’t. Not without your help. But you’re not helping.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;乌龟壳朝下躺着，肚子被太阳炙烤，四肢挣扎着努力自己翻过来。但是一直没成功。没有你的帮助，永远不会成功。但你并没有在帮它。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It’s important to work with empathetic people who aren’t murderous replicants.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;和富有同情心而不是残忍的杀人魔一起工作是十分重要的。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You probably don’t want to use all of these questions at every interview. I hope I’ve helped you re-think how to interview a company. Think I missed something? Let me know!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在一场面试中你可能不会用到所有问题。我希望我让你重新思考了如何面试一家公司。如果我疏忽了什么，欢迎指正。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;如何向面试官提问&quot;&gt;&lt;a href=&quot;#如何向面试官提问&quot; class=&quot;headerlink&quot; title=&quot;如何向面试官提问&quot;&gt;&lt;/a&gt;如何向面试官提问&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;原文链接 &lt;a href=&quot;https://rkoutnik.com/articles/Questions-to-ask-your-interviewer.html?utm_source=wanqu.co&amp;amp;utm_campaign=Wanqu+Daily&amp;amp;utm_medium=website&quot;&gt;Questions to ask your interviewer&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Tech Notes" scheme="http://victoriahong.com/categories/Tech-Notes/"/>
    
      <category term="Translation" scheme="http://victoriahong.com/categories/Tech-Notes/Translation/"/>
    
    
      <category term="Interview" scheme="http://victoriahong.com/tags/Interview/"/>
    
      <category term="Notes" scheme="http://victoriahong.com/tags/Notes/"/>
    
      <category term="翻译" scheme="http://victoriahong.com/tags/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>Bittiger 硅谷之路 7</title>
    <link href="http://victoriahong.com/2016/05/Bittiger-%E7%A1%85%E8%B0%B7%E4%B9%8B%E8%B7%AF7/"/>
    <id>http://victoriahong.com/2016/05/Bittiger-硅谷之路7/</id>
    <published>2016-05-12T05:02:12.000Z</published>
    <updated>2016-05-13T00:22:05.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Lessons-Learned-in-Scaling-Twitter&quot;&gt;&lt;a href=&quot;#Lessons-Learned-in-Scaling-Twitter&quot; class=&quot;headerlink&quot; title=&quot;Lessons Learned in Scaling Twitter&quot;&gt;&lt;/a&gt;Lessons Learned in Scaling Twitter&lt;/h2&gt;&lt;h3 id=&quot;一周结构及缺陷&quot;&gt;&lt;a href=&quot;#一周结构及缺陷&quot; class=&quot;headerlink&quot; title=&quot;一周结构及缺陷&quot;&gt;&lt;/a&gt;一周结构及缺陷&lt;/h3&gt;&lt;p&gt;  Monarail + MySQL&lt;/p&gt;
&lt;p&gt;  Defects:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- MySQL难扩展：表格关系复杂；分布式更增加join复杂型
- 小变化也要全部部署，deploy时间长
- 性能差
- 架构混乱
&lt;/code&gt;&lt;/pre&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;改进&quot;&gt;&lt;a href=&quot;#改进&quot; class=&quot;headerlink&quot; title=&quot;改进&quot;&gt;&lt;/a&gt;改进&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;存储分开&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Tweets(gizzard)&lt;/li&gt;
&lt;li&gt;Users(gizzard)&lt;/li&gt;
&lt;li&gt;Timelines(redis)&lt;/li&gt;
&lt;li&gt;SocialGraph(gizzard)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;路由、展式、逻辑分开&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;TFE&lt;/li&gt;
&lt;li&gt;Web, API, Monorail&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Tweets, Users, Timelines&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/gQqOPnZ.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/RSsaj7d.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;解决方案&quot;&gt;&lt;a href=&quot;#解决方案&quot; class=&quot;headerlink&quot; title=&quot;解决方案&quot;&gt;&lt;/a&gt;解决方案&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;构建：开源的Twitter Server：配置、管理、日志、生命周期、监控服务&lt;/li&gt;
&lt;li&gt;服务通信：开源的Finagle：服务发现、负载均衡、重试、连接池、统计数据收集、分布调试&lt;/li&gt;
&lt;li&gt;调用服务：做什么（service as a function）&amp;amp; 怎么做（底层优化）&lt;/li&gt;
&lt;li&gt;找到最优策略：注意观察median，而不是平均值&lt;/li&gt;
&lt;li&gt;监控：zipkin&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Lessons-Learned-in-Scaling-Twitter&quot;&gt;&lt;a href=&quot;#Lessons-Learned-in-Scaling-Twitter&quot; class=&quot;headerlink&quot; title=&quot;Lessons Learned in Scaling Twitter&quot;&gt;&lt;/a&gt;Lessons Learned in Scaling Twitter&lt;/h2&gt;&lt;h3 id=&quot;一周结构及缺陷&quot;&gt;&lt;a href=&quot;#一周结构及缺陷&quot; class=&quot;headerlink&quot; title=&quot;一周结构及缺陷&quot;&gt;&lt;/a&gt;一周结构及缺陷&lt;/h3&gt;&lt;p&gt;  Monarail + MySQL&lt;/p&gt;
&lt;p&gt;  Defects:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- MySQL难扩展：表格关系复杂；分布式更增加join复杂型
- 小变化也要全部部署，deploy时间长
- 性能差
- 架构混乱
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="Tech Notes" scheme="http://victoriahong.com/categories/Tech-Notes/"/>
    
    
      <category term="Bittiger" scheme="http://victoriahong.com/tags/Bittiger/"/>
    
      <category term="Notes" scheme="http://victoriahong.com/tags/Notes/"/>
    
      <category term="Structure" scheme="http://victoriahong.com/tags/Structure/"/>
    
      <category term="硅谷之路" scheme="http://victoriahong.com/tags/%E7%A1%85%E8%B0%B7%E4%B9%8B%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>Python学习笔记1</title>
    <link href="http://victoriahong.com/2016/05/Python1/"/>
    <id>http://victoriahong.com/2016/05/Python1/</id>
    <published>2016-05-09T05:02:28.000Z</published>
    <updated>2016-05-10T00:29:51.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;有点杂乱的笔记，第一次读python小项目&quot;&gt;&lt;a href=&quot;#有点杂乱的笔记，第一次读python小项目&quot; class=&quot;headerlink&quot; title=&quot;有点杂乱的笔记，第一次读python小项目&quot;&gt;&lt;/a&gt;有点杂乱的笔记，第一次读python小项目&lt;/h2&gt;&lt;p&gt;关于shebang, click, decorator, random, ifmain, underscore用法, map &amp;amp; reduce &amp;amp; filter, self, yield, OOP, uuid, with.&lt;/p&gt;
&lt;p&gt;感谢&lt;a href=&quot;http://www.wilbeibi.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@wilbeibi&lt;/a&gt;的帮助 &amp;lt;3&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;Content&quot;&gt;&lt;a href=&quot;#Content&quot; class=&quot;headerlink&quot; title=&quot;Content&quot;&gt;&lt;/a&gt;Content&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;What does &lt;code&gt;#!/usr/bin/python&lt;/code&gt; mean?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;#!&lt;/code&gt; is a mark for what interpreter to use for this script.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;#!/usr/bin/python&lt;/code&gt; is called &lt;strong&gt;Shebang line&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you have several versions of Python installed, /usr/bin/env will ensure the interpreter used is the first one on your environment’s $PATH. The alternative would be to hardcode something like #!/usr/bin/python; that’s ok, but less flexible.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you want to use: &lt;code&gt;$python myscript.py&lt;/code&gt;, you don’t need that line at all. The system will call python and then python interpreter will run your script.&lt;/p&gt;
&lt;p&gt;But if you intend to use: $./myscript.py, here is where you need it.&lt;/p&gt;
&lt;p&gt;Reference: &lt;a href=&quot;http://stackoverflow.com/questions/2429511/why-do-people-write-usr-bin-env-python-on-the-first-line-of-a-python-script&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;StackOverFlowAnswer&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://www.tutorialspoint.com/python/python_if_else.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Python IF…ELIF…ELSE Statements&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;if expression1:&amp;#10;  statements(s)&amp;#10;elif expression2:&amp;#10;  statements(s)&amp;#10;else:&amp;#10;  statements(s)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Library: Click&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Click is a command line library for Python.&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;import click&amp;#10;&amp;#10;@click.command()&amp;#10;@click.option(&amp;#39;--count&amp;#39;, default=1, help=&amp;#39;Number of greetings.&amp;#39;)&amp;#10;@click.option(&amp;#39;--name&amp;#39;, prompt=&amp;#39;Your name&amp;#39;,&amp;#10;              help=&amp;#39;The person to greet.&amp;#39;)&amp;#10;def hello(count, name):&amp;#10;    for x in range(count):&amp;#10;        click.echo(&amp;#39;Hello %s!&amp;#39; % name)&amp;#10;&amp;#10;if __name__ == &amp;#39;__main__&amp;#39;:&amp;#10;    hello()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Run this script:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ python hello.py --count=3&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Get a hint: &lt;code&gt;Your name:&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Input &lt;code&gt;John&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Output:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Hello John!&amp;#10;Hello John!&amp;#10;Hello John!&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Reference: &lt;a href=&quot;http://click.pocoo.org/5/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;$ Click&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Decorator&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Decorator Pattern 多用于wrapper class。在不改变原来class的基础上，添加新功能。一层一层包起来，可以变换顺序。&lt;/p&gt;
&lt;p&gt;Python的annotation类似于函数式编程。&lt;/p&gt;
&lt;p&gt;一个例子:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;def hello(fn)&amp;#10;  def wrapper():&amp;#10;    print &amp;#34;hello, %s&amp;#34; % fn.__name__&amp;#10;    fn()&amp;#10;    print &amp;#34;goodbye, %s&amp;#34; % fn.__name__&amp;#10;&amp;#10;@hello&amp;#10;def foo():&amp;#10;  print &amp;#34;I am foo&amp;#34;&amp;#10;&amp;#10;foo()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;foo()是一个全局的方法，可以当做main函数执行，上面的代码相当于 foo = hello(foo)。&lt;/p&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;hello, foo&amp;#10;I am foo&amp;#10;goodbye, foo&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;hello(foo)返回了wrapper()函数，所以，foo其实变成了wrapper的一个变量，而后面的foo()执行其实变成了wrapper()。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Decorator还可以包裹多层，加参数。&lt;/p&gt;
&lt;p&gt;Reference:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.xiayf.cn/2013/01/04/Decorators-and-Functional-Python/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;装饰器与函数式Python(译)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://coolshell.cn/articles/11265.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Python修饰器的函数式编程&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;choice &amp;amp; randint&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;from random import randint&amp;#10;from random import choice&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;randint(0, 23)&lt;/code&gt; 0~23闭合区间中随机一个，可重复。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;choice(list)&lt;/code&gt; list中随机一个，可重复。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;range&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;range(1,5)&lt;/code&gt; [1, 2, 3, 4]左闭右开。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;list的一个用法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;list = [1, 2, 3, “a”]&lt;/p&gt;
&lt;p&gt;list[2:3] –&amp;gt; [2, 3]&lt;/p&gt;
&lt;p&gt;list[::-1] –&amp;gt; [“a”, 3, 2, 1]实现了逆序输出。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;if __name__ == &amp;quot;__main__&amp;quot;:&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;类似于java中的main函数。&lt;/p&gt;
&lt;p&gt;python是解释型语言。一行一行读出来，所以代码顺序会影响执行结果。当读到main时候，执行main的内容，所以main一般放在最后，不然有一部分代码还没读到会报错。&lt;/p&gt;
&lt;p&gt;关于编译器和解释器的区别：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/gGRoMLS.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;关于执行顺序的一个例子：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# file one.py&amp;#10;def func():&amp;#10;    print(&amp;#34;func() in one.py&amp;#34;)&amp;#10;&amp;#10;print(&amp;#34;top-level in one.py&amp;#34;)&amp;#10;&amp;#10;if __name__ == &amp;#34;__main__&amp;#34;:&amp;#10;    print(&amp;#34;one.py is being run directly&amp;#34;)&amp;#10;else:&amp;#10;    print(&amp;#34;one.py is being imported into another module&amp;#34;)&amp;#10;&amp;#10;# file two.py&amp;#10;import one&amp;#10;&amp;#10;print(&amp;#34;top-level in two.py&amp;#34;)&amp;#10;one.func()&amp;#10;&amp;#10;if __name__ == &amp;#34;__main__&amp;#34;:&amp;#10;    print(&amp;#34;two.py is being run directly&amp;#34;)&amp;#10;else:&amp;#10;    print(&amp;#34;two.py is being imported into another module&amp;#34;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;运行：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;python one.py&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;得到：&lt;/p&gt;
&lt;p&gt;top-level in one.py&lt;/p&gt;
&lt;p&gt;one.py is being run directly&lt;/p&gt;
&lt;p&gt;先print再到main。&lt;/p&gt;
&lt;p&gt;运行：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;python two.py&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;得到：&lt;/p&gt;
&lt;p&gt;top-level in one.py&lt;/p&gt;
&lt;p&gt;one.py is being imported into another module&lt;/p&gt;
&lt;p&gt;top-level in two.py&lt;/p&gt;
&lt;p&gt;func() in one.py&lt;/p&gt;
&lt;p&gt;two.py is being run directly&lt;/p&gt;
&lt;p&gt;先one的print再到one的main。two的print，到one.fuc(),最后到two的main。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;when module one gets loaded, its &lt;code&gt;__name__&lt;/code&gt; equals “one” instead of &lt;code&gt;__main__&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Reference: &lt;a href=&quot;http://stackoverflow.com/questions/419163/what-does-if-name-main-do&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;what does if main do&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Underscore in python&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;_single_leading_underscore&lt;/code&gt;: weak “internal use” indicator. E.g. “from M import …” does not import objects whose name starts with an underscore.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Python doesn’t have real private methods, so one underline in the start of a method or attribute means you shouldn’t access this method, because it’s not part of the API.&lt;/p&gt;
&lt;p&gt;2.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;single_trailing_underscore_&lt;/code&gt;: used by convention to avoid conflicts with Python keyword, e.g. &lt;code&gt;Tkinter.Toplevel(master, class_=&amp;#39;ClassName&amp;#39;)&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;3.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;__double_leading_underscore&lt;/code&gt;: when naming a class attribute, invokes name mangling.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It makes a lot of confusion. It should not be used to create a private method. It should be used to avoid your method to be overridden by a subclass. So, when you create a method starting with __ it means that you don’t want anyone to override it, it will be accessible only from inside the class where it was defined.&lt;/p&gt;
&lt;p&gt;子类中如果有个跟父类一样的double underscore 开头的方法，那么子类的是不能覆盖父类的方法的。&lt;/p&gt;
&lt;p&gt;4.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;__double_leading_and_trailing_underscore__&lt;/code&gt;: “magic” objects or attributes that live in user-controlled namespaces. E.g. &lt;code&gt;__init__&lt;/code&gt;, &lt;code&gt;__import__&lt;/code&gt; or &lt;code&gt;__file__&lt;/code&gt;. Never invent such names; only use them as documented.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;__this__&lt;/code&gt;是python自动调用的方法。&lt;/p&gt;
&lt;p&gt;Reference:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/8689964/python-why-do-some-functions-have-underscores-before-and-after-the-functio&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;why have underscores before and after function&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://www.python.org/dev/peps/pep-0008/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;style guide&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;functionName.__name__&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;One of attributes of this function.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;map &amp;amp; reduce&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Map(func, list) 是把一个function用在list所有元素上。&lt;/p&gt;
&lt;p&gt;Reduce(func, list) 是按照function的方法将list所有元素合并成一个。&lt;/p&gt;
&lt;p&gt;Filter(func, list) 是把运用function后return为true的元素筛选出来。&lt;/p&gt;
&lt;p&gt;Reference: &lt;a href=&quot;http://www.python-course.eu/lambda.php&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Lambda, filter, reduce and map&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Python的OOP如何&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;对于静态语言（例如Java）来说，如果需要传入Animal类型，则传入的对象必须是Animal类型或者它的子类，否则，将无法调用run()方法。&lt;/p&gt;
&lt;p&gt;对于Python这样的动态语言来说，则不一定需要传入Animal类型。我们只需要保证传入的对象有一个run()方法就可以了。&lt;/p&gt;
&lt;p&gt;动态语言的鸭子类型特点决定了继承不像静态语言那样是必须的。&lt;/p&gt;
&lt;p&gt;Reference: &lt;a href=&quot;http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001431865288798deef438d865e4c2985acff7e9fad15e3000&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;继承和多态&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;yield&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;yield&lt;/code&gt; is a keyword that is used like return, except the function will return a generator.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;产生一个generator，需要遍历一遍得到内容。或者转成list(generator)。&lt;/p&gt;
&lt;p&gt;Reference: &lt;a href=&quot;http://stackoverflow.com/questions/231767/what-does-the-yield-keyword-do-in-python&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;What does the yield keyword do in Python?&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;self&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;self 就代表要这个方法作用的Object。&lt;/p&gt;
&lt;p&gt;没有self的类似于static修饰的。不过牵扯到引用传递还是值传递的问题略复杂。反正list是可以共享的，int, string啥的不行。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;uuid&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The uuid module implements Universally Unique Identifiers as described in RFC 4122.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;无题&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;with open(self.file_path, &amp;#39;w&amp;#39;) as f:&amp;#10;          f.write(self.code)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;with&lt;/code&gt; 类似于 &lt;code&gt;try catch&lt;/code&gt;，可以执行才执行。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;有点杂乱的笔记，第一次读python小项目&quot;&gt;&lt;a href=&quot;#有点杂乱的笔记，第一次读python小项目&quot; class=&quot;headerlink&quot; title=&quot;有点杂乱的笔记，第一次读python小项目&quot;&gt;&lt;/a&gt;有点杂乱的笔记，第一次读python小项目&lt;/h2&gt;&lt;p&gt;关于shebang, click, decorator, random, ifmain, underscore用法, map &amp;amp; reduce &amp;amp; filter, self, yield, OOP, uuid, with.&lt;/p&gt;
&lt;p&gt;感谢&lt;a href=&quot;http://www.wilbeibi.com&quot;&gt;@wilbeibi&lt;/a&gt;的帮助 &amp;lt;3&lt;/p&gt;
    
    </summary>
    
      <category term="Tech Notes" scheme="http://victoriahong.com/categories/Tech-Notes/"/>
    
    
      <category term="Notes" scheme="http://victoriahong.com/tags/Notes/"/>
    
      <category term="python" scheme="http://victoriahong.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Blog Update 1</title>
    <link href="http://victoriahong.com/2016/05/xinhong1/"/>
    <id>http://victoriahong.com/2016/05/xinhong1/</id>
    <published>2016-05-09T04:33:26.000Z</published>
    <updated>2016-05-09T04:57:50.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Favicon-amp-Paper&quot;&gt;&lt;a href=&quot;#Favicon-amp-Paper&quot; class=&quot;headerlink&quot; title=&quot;Favicon &amp;amp; Paper&quot;&gt;&lt;/a&gt;Favicon &amp;amp; Paper&lt;/h2&gt;&lt;p&gt;Use an ios app named &lt;a href=&quot;https://www.fiftythree.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Paper&lt;/a&gt; to draw a favicon for my blog. lol&lt;/p&gt;
&lt;p&gt;Hope you enjoy it :)&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://burner.bonanza.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Remove background from images&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;My favicon:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/5git7z3.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Favicon-amp-Paper&quot;&gt;&lt;a href=&quot;#Favicon-amp-Paper&quot; class=&quot;headerlink&quot; title=&quot;Favicon &amp;amp; Paper&quot;&gt;&lt;/a&gt;Favicon &amp;amp; Paper&lt;/h2&gt;&lt;p&gt;Use an
    
    </summary>
    
      <category term="Life" scheme="http://victoriahong.com/categories/Life/"/>
    
    
      <category term="Blog" scheme="http://victoriahong.com/tags/Blog/"/>
    
  </entry>
  
  <entry>
    <title>Algorithms Part I Week 2</title>
    <link href="http://victoriahong.com/2016/05/Algorithms-Part-I-Week-2/"/>
    <id>http://victoriahong.com/2016/05/Algorithms-Part-I-Week-2/</id>
    <published>2016-05-07T06:35:09.000Z</published>
    <updated>2016-05-07T06:38:49.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Stacks-and-Queues-amp-Elementary-Sorts&quot;&gt;&lt;a href=&quot;#Stacks-and-Queues-amp-Elementary-Sorts&quot; class=&quot;headerlink&quot; title=&quot;Stacks and Queues &amp;amp; Elementary Sorts&quot;&gt;&lt;/a&gt;Stacks and Queues &amp;amp; Elementary Sorts&lt;/h2&gt;&lt;h3 id=&quot;Overview&quot;&gt;&lt;a href=&quot;#Overview&quot; class=&quot;headerlink&quot; title=&quot;Overview&quot;&gt;&lt;/a&gt;Overview&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Modular programming style&lt;/li&gt;
&lt;li&gt;For stack, push pop&lt;ul&gt;
&lt;li&gt;Each operation cost constant time in the worst case&lt;/li&gt;
&lt;li&gt;Extra time and space to deal with the link&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;For queue, enqueue dequeue&lt;ul&gt;
&lt;li&gt;Each operation cost constant amortized time&lt;/li&gt;
&lt;li&gt;less wasted space&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Generics&lt;/li&gt;
&lt;li&gt;Iterator&lt;/li&gt;
&lt;/ul&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;Stacks&quot;&gt;&lt;a href=&quot;#Stacks&quot; class=&quot;headerlink&quot; title=&quot;Stacks&quot;&gt;&lt;/a&gt;Stacks&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Linked-list implementation&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public class LinkedStackOfStrings &amp;#123;&amp;#10;&amp;#9;private Node first = null;&amp;#10;&amp;#10;&amp;#9;private class Node &amp;#123;&amp;#10;&amp;#9;&amp;#9;String item;&amp;#10;&amp;#9;&amp;#9;Node next;&amp;#10;&amp;#9;&amp;#125;&amp;#10;&amp;#10;&amp;#9;public boolean isEmpty()&amp;#123;&amp;#10;&amp;#9;&amp;#9;return first == null;&amp;#10;&amp;#9;&amp;#125;&amp;#10;&amp;#10;&amp;#9;public String pop()&amp;#123;&amp;#10;&amp;#9;&amp;#9;String item = first.item;&amp;#10;&amp;#9;&amp;#9;first = first.next;&amp;#10;&amp;#9;&amp;#9;return item;&amp;#10;&amp;#9;&amp;#125;&amp;#10;&amp;#10;&amp;#9;public void push(String item)&amp;#123;&amp;#10;&amp;#9;&amp;#9;Node oldFirst = first;&amp;#10;&amp;#9;&amp;#9;first = new Node();&amp;#10;&amp;#9;&amp;#9;first.item = item;&amp;#10;&amp;#9;&amp;#9;first.next = oldFirst;&amp;#10;&amp;#9;&amp;#125;&amp;#10;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Performance:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Operations takes constant time&lt;/li&gt;
&lt;li&gt;40N bytes&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Array implementation&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;s[N]&lt;/p&gt;
&lt;p&gt;push() –&amp;gt; add new item at s[N]&lt;/p&gt;
&lt;p&gt;pop() –&amp;gt; remove item from s[N-1]&lt;/p&gt;
&lt;p&gt;Defects:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;May cause stack overflow when N exceeds capacity&lt;/li&gt;
&lt;li&gt;Loitering problem (after pop, still keep a reference, can’t be GCed)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Resizing-array implementation&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;push() –&amp;gt; double size of s[] when it is full&lt;/p&gt;
&lt;p&gt;pop() –&amp;gt; halve size of s[] when it is one-quarter full&lt;/p&gt;
&lt;p&gt;Performance:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;operation&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;best&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;worst&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;aver&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;construct&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;1&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;1&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;push&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;1&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;N&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;pop&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;1&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;N&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;size&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;1&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;1&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;8N when full; 32N when one-quarter full&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Queue&quot;&gt;&lt;a href=&quot;#Queue&quot; class=&quot;headerlink&quot; title=&quot;Queue&quot;&gt;&lt;/a&gt;Queue&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Linked-list implementation&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public class LinkedQueueOfStrings&amp;#123;&amp;#10;&amp;#9;private Node first, last;&amp;#10;&amp;#10;&amp;#9;private class Node &amp;#123;&amp;#10;&amp;#9;&amp;#9;String item;&amp;#10;&amp;#9;&amp;#9;Node next;&amp;#10;&amp;#9;&amp;#125;&amp;#10;&amp;#10;&amp;#9;public boolean isEmpty()&amp;#123;&amp;#10;&amp;#9;&amp;#9;return first == null;&amp;#10;&amp;#9;&amp;#125;&amp;#10;&amp;#10;&amp;#9;public void enqueue(String item)&amp;#123;&amp;#10;&amp;#9;&amp;#9;Node oldLast = last;&amp;#10;&amp;#9;&amp;#9;last = new Node();&amp;#10;&amp;#9;&amp;#9;last.item = item;&amp;#10;&amp;#9;&amp;#9;last.next = null;&amp;#10;&amp;#9;&amp;#9;if (isEmpty()) first = last;&amp;#10;&amp;#9;&amp;#9;else oldLast.next = last;&amp;#10;&amp;#9;&amp;#125;&amp;#10;&amp;#10;&amp;#9;public String dequeue()&amp;#123;&amp;#10;&amp;#9;&amp;#9;String item = first.item;&amp;#10;&amp;#9;&amp;#9;first = first.next;&amp;#10;&amp;#9;&amp;#9;if (isEmpty()) last = null;&amp;#10;&amp;#9;&amp;#9;return item;&amp;#10;&amp;#9;&amp;#125;&amp;#10;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Generics&quot;&gt;&lt;a href=&quot;#Generics&quot; class=&quot;headerlink&quot; title=&quot;Generics&quot;&gt;&lt;/a&gt;Generics&lt;/h3&gt;&lt;p&gt;In a nutshell, generics enable types (classes and interfaces) to be parameters when defining classes, interfaces and methods.&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public class FixedCapacityStack(int capacity)&amp;#123;&amp;#10;&amp;#9;s = (Item[]) new Object[capacity];&amp;#10;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Java don’t allow create an array in generic type, so an ugly cast is needed here. Get a warning.&lt;/p&gt;
&lt;p&gt;Primitive type has a wrapper class. Autoboxing can cast btw a primitive type and its wrapper automatically behind the scenes.&lt;/p&gt;
&lt;h3 id=&quot;Iterators&quot;&gt;&lt;a href=&quot;#Iterators&quot; class=&quot;headerlink&quot; title=&quot;Iterators&quot;&gt;&lt;/a&gt;Iterators&lt;/h3&gt;&lt;p&gt;Iterable is an interface which can return an iterator.&lt;/p&gt;
&lt;p&gt;Iterator is an interface which has methods: hasNext() and next().&lt;/p&gt;
&lt;p&gt;Foreach statement is equivalent to&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Iterator&amp;#60;String&amp;#62; i = stack.iterator();&amp;#10;&amp;#10;while(i.hasNext())&amp;#123;&amp;#10;&amp;#9;String s = i.next();&amp;#10;&amp;#9;//do sth with s&amp;#10;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;When order doesn’t matter, we use &lt;strong&gt;Bag API&lt;/strong&gt;. Bag implements iterable interface. Method: add(), size(), iterator().&lt;/p&gt;
&lt;h3 id=&quot;Stack-and-queue-applications&quot;&gt;&lt;a href=&quot;#Stack-and-queue-applications&quot; class=&quot;headerlink&quot; title=&quot;Stack and queue applications&quot;&gt;&lt;/a&gt;Stack and queue applications&lt;/h3&gt;&lt;p&gt;List collection implements iterable interface. But it is too broad.&lt;/p&gt;
&lt;p&gt;Dijkstra’s &lt;strong&gt;&lt;a href=&quot;http://algs4.cs.princeton.edu/13stacks/Evaluate.java.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;two-stack algorithm&lt;/a&gt;&lt;/strong&gt; to evaluate n arithmetic expression. Value stack and Operator stack. Omit ‘(‘ but pop when ‘)’.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Stacks-and-Queues-amp-Elementary-Sorts&quot;&gt;&lt;a href=&quot;#Stacks-and-Queues-amp-Elementary-Sorts&quot; class=&quot;headerlink&quot; title=&quot;Stacks and Queues &amp;amp; Elementary Sorts&quot;&gt;&lt;/a&gt;Stacks and Queues &amp;amp; Elementary Sorts&lt;/h2&gt;&lt;h3 id=&quot;Overview&quot;&gt;&lt;a href=&quot;#Overview&quot; class=&quot;headerlink&quot; title=&quot;Overview&quot;&gt;&lt;/a&gt;Overview&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Modular programming style&lt;/li&gt;
&lt;li&gt;For stack, push pop&lt;ul&gt;
&lt;li&gt;Each operation cost constant time in the worst case&lt;/li&gt;
&lt;li&gt;Extra time and space to deal with the link&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;For queue, enqueue dequeue&lt;ul&gt;
&lt;li&gt;Each operation cost constant amortized time&lt;/li&gt;
&lt;li&gt;less wasted space&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Generics&lt;/li&gt;
&lt;li&gt;Iterator&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Tech Notes" scheme="http://victoriahong.com/categories/Tech-Notes/"/>
    
    
      <category term="Algorithms" scheme="http://victoriahong.com/tags/Algorithms/"/>
    
      <category term="Notes" scheme="http://victoriahong.com/tags/Notes/"/>
    
  </entry>
  
  <entry>
    <title>Git Command Cheatsheet</title>
    <link href="http://victoriahong.com/2016/05/GitCommandCheatsheet/"/>
    <id>http://victoriahong.com/2016/05/GitCommandCheatsheet/</id>
    <published>2016-05-03T01:38:41.000Z</published>
    <updated>2016-05-13T04:07:01.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;My-A-to-Z&quot;&gt;&lt;a href=&quot;#My-A-to-Z&quot; class=&quot;headerlink&quot; title=&quot;My A to Z&quot;&gt;&lt;/a&gt;My A to Z&lt;/h2&gt;&lt;p&gt;Help yourself with these cookies.&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;Concepts&quot;&gt;&lt;a href=&quot;#Concepts&quot; class=&quot;headerlink&quot; title=&quot;Concepts&quot;&gt;&lt;/a&gt;Concepts&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;HEAD&lt;/strong&gt; is the symbolic name for the currently checked out commit – it’s essentially what commit you’re working on top of.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git check branch_name&lt;/code&gt; will sync HEAD with latest branch. Check out a commit will attach HEAD to that commit.&lt;/p&gt;
&lt;h3 id=&quot;Commit&quot;&gt;&lt;a href=&quot;#Commit&quot; class=&quot;headerlink&quot; title=&quot;Commit&quot;&gt;&lt;/a&gt;Commit&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;git checkout origin master &amp;amp;&amp;amp; git commit&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;  &lt;img src=&quot;http://i.imgur.com/HeNywjX.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Reverse-Changes&quot;&gt;&lt;a href=&quot;#Reverse-Changes&quot; class=&quot;headerlink&quot; title=&quot;Reverse Changes&quot;&gt;&lt;/a&gt;Reverse Changes&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;git reset HEAD~1&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;  Reset local current commit to 1 step before HEAD.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;git revert HEAD~1&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;  Revert remote pushed commit to 1 step before HEAD.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;git fetch &amp;amp;&amp;amp; git rebase origin master &amp;amp;&amp;amp; git push&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;  &lt;code&gt;git pull --rebase&lt;/code&gt; is short for &lt;code&gt;git fetch &amp;amp;&amp;amp; git rebase&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/Cmu9UdI.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;Branch&quot;&gt;&lt;a href=&quot;#Branch&quot; class=&quot;headerlink&quot; title=&quot;Branch&quot;&gt;&lt;/a&gt;Branch&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;git checkout -b new_branch&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;  Create a new branch and check out.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;git branch -d my_branch&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;  Delete a new branch.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;git checkout my_branch&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;  Before checking out to another branch, commit or revert changes. You branch becomes visible only if you push it to origin branch.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;git reset --hard HEAD&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;  Discard all uncommitted changes at local repo.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;git fetch origin&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;  &lt;code&gt;git reset --hard origin master&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;  Discard all committed changes at local repo.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;git merge my_branch&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;  Check out master branch and then merge your own branch to master.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;git add &amp;lt;filename&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;  After solving all conflicts, mark as merged.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;git checkout branch_name^&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;  Caret(^) is relative ref to parent. ^^ is to grandparent. Alternative to hash.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;git checkout HEAD~4&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;  Equivalent to HEAD^^^^.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;git branch -f master HEAD~3&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;  Moves (by force) the master branch to three parents behind HEAD.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Fetch-Data&quot;&gt;&lt;a href=&quot;#Fetch-Data&quot; class=&quot;headerlink&quot; title=&quot;Fetch Data&quot;&gt;&lt;/a&gt;Fetch Data&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;git fetch&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;  Downloads the commits that the remote has but are missing from our local repository, and updates where our remote branches point (for instance, origin master).&lt;/p&gt;
&lt;p&gt;  Git fetch, however, does not change anything about your local state. It will not update your master branch or change anything about how your file system looks right now.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;git pull&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;  Equivalent to &lt;code&gt;git fetch &amp;amp;&amp;amp; git merge&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;  &lt;img src=&quot;http://i.imgur.com/7nCIfHw.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Tricks&quot;&gt;&lt;a href=&quot;#Tricks&quot; class=&quot;headerlink&quot; title=&quot;Tricks&quot;&gt;&lt;/a&gt;Tricks&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;git mv old_name new_name &amp;amp;&amp;amp; git commit -m &amp;amp;&amp;amp; git push origin master&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;  Git can’t track file renaming but only content modification. So deal with it separately. Do it at the dir where the files locate.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;git diff &amp;lt;source_branch&amp;gt; &amp;lt;target-branch&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;  Check difference between two versions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;git log&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;  Get id for your commit.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;git tag 1.0.0 &amp;lt;id&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;  Id can be less than 10 characters but should be unique.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;git rebase master&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;  &lt;img src=&quot;http://i.imgur.com/KDFUWgL.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;git cherry-pick c1 c2 c3&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;  Git cherry-pick is great when you know which commits you want (and you know their corresponding hashes).&lt;/p&gt;
&lt;p&gt;  &lt;img src=&quot;http://i.imgur.com/SRF66QK.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;git rebase -i HEAD~4&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;  Interactive rebase. From current to 4 steps before, choose the commits you need and order them. New branch starts from 4 step before.&lt;/p&gt;
&lt;p&gt;  &lt;img src=&quot;http://i.imgur.com/ura6v9g.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;git rebase -i &amp;amp;&amp;amp; git commit --amend&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;  We used rebase -i to reorder the commits. Once the commit we wanted to change was on top, we could easily –amend it and re-order back to our preferred order.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;git fakeTeamwork&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;  Fake teamwork on remote repo.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/ynxS8Ap.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;Syncing-a-fork&quot;&gt;&lt;a href=&quot;#Syncing-a-fork&quot; class=&quot;headerlink&quot; title=&quot;Syncing a fork&quot;&gt;&lt;/a&gt;Syncing a fork&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;- [Configuring a remote for a fork](https://help.github.com/articles/configuring-a-remote-for-a-fork/)

- [Syncing a fork](https://help.github.com/articles/syncing-a-fork/)
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;Reference&quot;&gt;&lt;a href=&quot;#Reference&quot; class=&quot;headerlink&quot; title=&quot;Reference:&quot;&gt;&lt;/a&gt;Reference:&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://pcottle.github.io/learnGitBranching/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Learn Git Branching&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;My-A-to-Z&quot;&gt;&lt;a href=&quot;#My-A-to-Z&quot; class=&quot;headerlink&quot; title=&quot;My A to Z&quot;&gt;&lt;/a&gt;My A to Z&lt;/h2&gt;&lt;p&gt;Help yourself with these cookies.&lt;/p&gt;
    
    </summary>
    
      <category term="Tech Notes" scheme="http://victoriahong.com/categories/Tech-Notes/"/>
    
    
      <category term="Git" scheme="http://victoriahong.com/tags/Git/"/>
    
      <category term="Notes" scheme="http://victoriahong.com/tags/Notes/"/>
    
  </entry>
  
  <entry>
    <title>Bittiger 硅谷之路 46</title>
    <link href="http://victoriahong.com/2016/04/Bittiger-%E7%A1%85%E8%B0%B7%E4%B9%8B%E8%B7%AF46/"/>
    <id>http://victoriahong.com/2016/04/Bittiger-硅谷之路46/</id>
    <published>2016-04-29T22:42:32.000Z</published>
    <updated>2016-04-29T23:44:10.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;Overview&quot;&gt;&lt;a href=&quot;#Overview&quot; class=&quot;headerlink&quot; title=&quot;Overview&quot;&gt;&lt;/a&gt;Overview&lt;/h3&gt;&lt;p&gt;OOD for Blackjack game&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;Diagram&quot;&gt;&lt;a href=&quot;#Diagram&quot; class=&quot;headerlink&quot; title=&quot;Diagram&quot;&gt;&lt;/a&gt;Diagram&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/gOUXtwk.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Player and Dealer extends dealer&lt;/li&gt;
&lt;li&gt;Strategy Pattern&lt;/li&gt;
&lt;li&gt;Don’t forget Game room&lt;/li&gt;
&lt;li&gt;还原世界，探求合理，生长迭代&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Overview&quot;&gt;&lt;a href=&quot;#Overview&quot; class=&quot;headerlink&quot; title=&quot;Overview&quot;&gt;&lt;/a&gt;Overview&lt;/h3&gt;&lt;p&gt;OOD for Blackjack game&lt;/p&gt;
    
    </summary>
    
      <category term="Tech Notes" scheme="http://victoriahong.com/categories/Tech-Notes/"/>
    
    
      <category term="Bittiger" scheme="http://victoriahong.com/tags/Bittiger/"/>
    
      <category term="Notes" scheme="http://victoriahong.com/tags/Notes/"/>
    
      <category term="OOD" scheme="http://victoriahong.com/tags/OOD/"/>
    
      <category term="硅谷之路" scheme="http://victoriahong.com/tags/%E7%A1%85%E8%B0%B7%E4%B9%8B%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>Bittiger 硅谷之路 44 &amp; 45</title>
    <link href="http://victoriahong.com/2016/04/Bittiger-%E7%A1%85%E8%B0%B7%E4%B9%8B%E8%B7%AF44and45/"/>
    <id>http://victoriahong.com/2016/04/Bittiger-硅谷之路44and45/</id>
    <published>2016-04-29T22:22:17.000Z</published>
    <updated>2016-04-29T22:32:11.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Overview&quot;&gt;&lt;a href=&quot;#Overview&quot; class=&quot;headerlink&quot; title=&quot;Overview&quot;&gt;&lt;/a&gt;Overview&lt;/h2&gt;&lt;p&gt;How to write crawler code and how to improve it step by step.&lt;/p&gt;
&lt;p&gt;Multi-thread concurrency design with mutex and semaphore.&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;Crawler&quot;&gt;&lt;a href=&quot;#Crawler&quot; class=&quot;headerlink&quot; title=&quot;Crawler&quot;&gt;&lt;/a&gt;Crawler&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;import urllib2&amp;#10;url=&amp;#39;http://yue.ifeng.com/a/20150717/39747647_0.shtml&amp;#39;&amp;#10;request = urllib2.Request(url)&amp;#10;response = urllib2.urlopen(request)&amp;#10;page = response.read()&amp;#10;webFile = open(&amp;#39;webPage.html&amp;#39;,&amp;#39;wb&amp;#39;)&amp;#10;webFile.write(page)&amp;#10;webFile.close()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Q1-What-is-the-network-process-after-crawl-a-web-page&quot;&gt;&lt;a href=&quot;#Q1-What-is-the-network-process-after-crawl-a-web-page&quot; class=&quot;headerlink&quot; title=&quot;Q1: What is the network process after crawl a web page?&quot;&gt;&lt;/a&gt;Q1: What is the network process after crawl a web page?&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;Step&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;Crawler&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;Web Server&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;0&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;socket()&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;socket()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;bind()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;listen()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;1&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;connect()&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;accept()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;2&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;read() &amp;amp; write()&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;read() &amp;amp; write()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;3&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;close()&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;close()&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;TCP 3-way handshake: SYN, SYN-ACK, ACK&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Layers&lt;/p&gt;
&lt;p&gt;  Application layer &lt;code&gt;FTP HTTP DNS&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;  Abstract layer &lt;code&gt;Socket&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;  Transportation layer &lt;code&gt;TCP UDP&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;  Network layer &lt;code&gt;IP&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;  Link layer &lt;code&gt;Hardware interface&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;  &lt;a href=&quot;http://coolshell.cn/articles/11564.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Reference&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Q2-What-is-HTML&quot;&gt;&lt;a href=&quot;#Q2-What-is-HTML&quot; class=&quot;headerlink&quot; title=&quot;Q2: What is HTML&quot;&gt;&lt;/a&gt;Q2: What is HTML&lt;/h3&gt;&lt;p&gt;Tree structure&lt;/p&gt;
&lt;h3 id=&quot;Q3-crawl-all-the-news-from-a-website&quot;&gt;&lt;a href=&quot;#Q3-crawl-all-the-news-from-a-website&quot; class=&quot;headerlink&quot; title=&quot;Q3: crawl all the news from a website&quot;&gt;&lt;/a&gt;Q3: crawl all the news from a website&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;identify a list page&lt;/li&gt;
&lt;li&gt;identify the links with and find a pattern&lt;/li&gt;
&lt;li&gt;find all with regex&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Architecture v1&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;list crawler –&amp;gt; links of news –&amp;gt; news crawler –&amp;gt; pages of news&lt;/p&gt;
&lt;h3 id=&quot;Q4-crawl-form-other-websites&quot;&gt;&lt;a href=&quot;#Q4-crawl-form-other-websites&quot; class=&quot;headerlink&quot; title=&quot;Q4: crawl form other websites&quot;&gt;&lt;/a&gt;Q4: crawl form other websites&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Architecture v2&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;design a crawler for each website(list and page)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Architecture v3&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;same crawler for all websites&lt;/p&gt;
&lt;p&gt;scheduler has a &lt;strong&gt;taskTable&lt;/strong&gt;: id, priority(0,1), type(list, page), state(new, done, working), link, availableTime, endTime&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;while(true)&amp;#10;  lock(taskTable)&amp;#10;  while taskTable.find(&amp;#34;state=new&amp;#34;) == null&amp;#10;    Release(taskTable)&amp;#10;    Sleep(1s)&amp;#10;    lock(taskTable)&amp;#10;&amp;#10;  task = taskTable.findOne(&amp;#34;state=new&amp;#34;)&amp;#10;  task.state = &amp;#34;working&amp;#34;&amp;#10;  Release(taskTable)&amp;#10;&amp;#10;  page = Crawl(task.url)&amp;#10;&amp;#10;  if task.type == &amp;#34;list&amp;#34;&amp;#10;    lock(taskTable)&amp;#10;    For newTask in page:&amp;#10;      taskTable.Add(newTask)&amp;#10;    task.state = &amp;#34;done&amp;#34;&amp;#10;    Release(taskTable)&amp;#10;  Else&amp;#10;    lock(pageTable)&amp;#10;    pageTable.Add(page)&amp;#10;    Release(pageTable)&amp;#10;    lock(taskTable)&amp;#10;    task.state = &amp;#34;done&amp;#34;&amp;#10;    Release(taskTable)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Q5-design-scheduler-with-conditional-variable&quot;&gt;&lt;a href=&quot;#Q5-design-scheduler-with-conditional-variable&quot; class=&quot;headerlink&quot; title=&quot;Q5: design scheduler with conditional variable&quot;&gt;&lt;/a&gt;Q5: design scheduler with conditional variable&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;while(true)&amp;#10;  lock(taskTable)&amp;#10;  while taskTable.find(&amp;#34;state=new&amp;#34;) == null&amp;#10;    Cond_Wait(cond, taskTable)&amp;#10;  task = taskTable.findOne(&amp;#34;state=new&amp;#34;)&amp;#10;  task.state = &amp;#34;working&amp;#34;&amp;#10;  Release(taskTable)&amp;#10;&amp;#10;  page = Crawl(task.url)&amp;#10;&amp;#10;  if task.type == &amp;#34;list&amp;#34;&amp;#10;    lock(taskTable)&amp;#10;    For newTask in page:&amp;#10;      taskTable.Add(newTask)&amp;#10;      Cond_Signal(cond)&amp;#10;    task.state = &amp;#34;done&amp;#34;&amp;#10;    Release(taskTable)&amp;#10;  Else&amp;#10;    lock(pageTable)&amp;#10;    pageTable.Add(page)&amp;#10;    Release(pageTable)&amp;#10;    lock(taskTable)&amp;#10;    task.state = &amp;#34;done&amp;#34;&amp;#10;    Release(taskTable)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Cond_Wait(cond, mutex)&amp;#10;  Lock(cond.threadWaitList)&amp;#10;  cond.threadWaitList.Add(this.thread)&amp;#10;  Release(cond.threadWaitList)&amp;#10;&amp;#10;  Release(mutex)&amp;#10;  Block(this.thread)&amp;#10;  Lock(mutex)&amp;#10;&amp;#10;&amp;#10;Cond_Signal(cond)&amp;#10;  Lock(cond.threadWaitList)&amp;#10;  if cond.threadWaitList.size &amp;#62; 0&amp;#10;    thread = cond.threadWaitList.Pop()&amp;#10;    Wakeup(thread)&amp;#10;   Release(cond.threadWaitList)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Q6-design-scheduler-with-semaphore&quot;&gt;&lt;a href=&quot;#Q6-design-scheduler-with-semaphore&quot; class=&quot;headerlink&quot; title=&quot;Q6: design scheduler with semaphore&quot;&gt;&lt;/a&gt;Q6: design scheduler with semaphore&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;while(true)&amp;#10;  Wait(numberOfNewTask)&amp;#10;  Lock(taskTable)&amp;#10;  task = taskTable.findOne(&amp;#34;state=new&amp;#34;)&amp;#10;  task.state = &amp;#34;working&amp;#34;&amp;#10;  Release(taskTable)&amp;#10;&amp;#10;  page = Crawl(task.url)&amp;#10;&amp;#10;  if task.type == &amp;#34;list&amp;#34;&amp;#10;    lock(taskTable)&amp;#10;    For newTask in page:&amp;#10;      taskTable.Add(newTask)&amp;#10;      Signal(numberOfNewTask)&amp;#10;    task.state = &amp;#34;done&amp;#34;&amp;#10;    Release(taskTable)&amp;#10;  Else&amp;#10;    lock(pageTable)&amp;#10;    pageTable.Add(page)&amp;#10;    Release(pageTable)&amp;#10;    lock(taskTable)&amp;#10;    task.state = &amp;#34;done&amp;#34;&amp;#10;    Release(taskTable)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Wait(semaphore)&amp;#10;  Lock(semaphore)&amp;#10;  semaphore.val--&amp;#10;  if semaphore.val &amp;#60; 0&amp;#10;    semaphore.processWaitList.Add(this.process)&amp;#10;    Release(semaphore)&amp;#10;    Block(this.process)&amp;#10;  Else&amp;#10;    Release(semaphore)&amp;#10;&amp;#10;Signal(semaphore)&amp;#10;  Lock(semaphore)&amp;#10;  semaphore.val++&amp;#10;  if semaphore.val &amp;#60;= 0&amp;#10;    process = semaphore.processWaitList.Pop()&amp;#10;    Wakeup(process)&amp;#10;  Release(semaphore)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Q7-Design-fastest-consumer-and-producer&quot;&gt;&lt;a href=&quot;#Q7-Design-fastest-consumer-and-producer&quot; class=&quot;headerlink&quot; title=&quot;Q7: Design fastest consumer and producer&quot;&gt;&lt;/a&gt;Q7: Design fastest consumer and producer&lt;/h3&gt;&lt;p&gt;Fill in later.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Overview&quot;&gt;&lt;a href=&quot;#Overview&quot; class=&quot;headerlink&quot; title=&quot;Overview&quot;&gt;&lt;/a&gt;Overview&lt;/h2&gt;&lt;p&gt;How to write crawler code and how to improve it step by step.&lt;/p&gt;
&lt;p&gt;Multi-thread concurrency design with mutex and semaphore.&lt;/p&gt;
    
    </summary>
    
      <category term="Tech Notes" scheme="http://victoriahong.com/categories/Tech-Notes/"/>
    
    
      <category term="Bittiger" scheme="http://victoriahong.com/tags/Bittiger/"/>
    
      <category term="Crawler" scheme="http://victoriahong.com/tags/Crawler/"/>
    
      <category term="Notes" scheme="http://victoriahong.com/tags/Notes/"/>
    
      <category term="concurrency" scheme="http://victoriahong.com/tags/concurrency/"/>
    
      <category term="硅谷之路" scheme="http://victoriahong.com/tags/%E7%A1%85%E8%B0%B7%E4%B9%8B%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>Algorithms Part I - Week 0 &amp; 1</title>
    <link href="http://victoriahong.com/2016/04/Algorithms-Part-I-Week-0-1/"/>
    <id>http://victoriahong.com/2016/04/Algorithms-Part-I-Week-0-1/</id>
    <published>2016-04-22T00:45:34.000Z</published>
    <updated>2016-04-22T06:25:53.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Union-Find-amp-Memory-Usage-for-Algorithm&quot;&gt;&lt;a href=&quot;#Union-Find-amp-Memory-Usage-for-Algorithm&quot; class=&quot;headerlink&quot; title=&quot;Union-Find &amp;amp; Memory Usage for Algorithm&quot;&gt;&lt;/a&gt;Union-Find &amp;amp; Memory Usage for Algorithm&lt;/h2&gt;&lt;h3 id=&quot;Overview&quot;&gt;&lt;a href=&quot;#Overview&quot; class=&quot;headerlink&quot; title=&quot;Overview&quot;&gt;&lt;/a&gt;Overview&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;algorithm&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;initialize&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;union&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;find&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;quick-find&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;N&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;N&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;1&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;union时loop更新有共同祖先的顶点&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;quick-union&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;N&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;N&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;N&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;union时只需要更新一个顶点的祖先&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;weighted QU&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;N&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;lg N&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;lg N&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;加一个size记录，小树总是连在大树上&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;M union-find operations on a set of N objects:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;algorithm&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;worst-case time&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;quick-find&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;MN&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;quick-union&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;MN&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;weighted QU&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;N + M log N&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;QU + path compression&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;N + M log N&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Weighted QU + path compression&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;N + M log* N&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;Dynamic-Connectivity&quot;&gt;&lt;a href=&quot;#Dynamic-Connectivity&quot; class=&quot;headerlink&quot; title=&quot;Dynamic Connectivity&quot;&gt;&lt;/a&gt;Dynamic Connectivity&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Connected components&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Quick find / eager approach&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;data structure&lt;/p&gt;
&lt;p&gt; int[] id = new int[]&lt;br&gt; p and q are connected iff they have the same id&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;find: check is p and q have the same id&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;union: merger components containing p and q&lt;/p&gt;
&lt;p&gt; (id[i] == id[p] –&amp;gt; id[q])&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public class QF&amp;#10;&amp;#123;&amp;#10;&amp;#9;private int[] id;&amp;#10;&amp;#10;&amp;#9;public QF(int N)&amp;#10;&amp;#9;&amp;#123;&amp;#10;&amp;#9;&amp;#9;id = new int[N];&amp;#10;&amp;#9;&amp;#9;for (int i = 0; i &amp;#60; N; i++)&amp;#10;&amp;#9;&amp;#9;&amp;#123;&amp;#10;&amp;#9;&amp;#9;&amp;#9;id[i] = i; // initialize, cost: N&amp;#10;&amp;#9;&amp;#9;&amp;#125;&amp;#10;&amp;#9;&amp;#125;&amp;#10;&amp;#10;&amp;#9;public boolean connected(int p, int q)&amp;#10;&amp;#9;&amp;#123;&amp;#10;&amp;#9;&amp;#9;return id[p] == id[q]; // cost: 1&amp;#10;&amp;#9;&amp;#125;&amp;#10;&amp;#10;&amp;#9;public void union(int p, int q) // too expensive, cost: N&amp;#10;&amp;#9;&amp;#123;&amp;#10;&amp;#9;&amp;#9;int pid = id[p];&amp;#10;&amp;#9;&amp;#9;int qid = id[q];&amp;#10;&amp;#9;&amp;#9;for (int i = 0; i &amp;#60; id.length; i++)&amp;#10;&amp;#9;&amp;#9;&amp;#123;&amp;#10;&amp;#9;&amp;#9;&amp;#9;if (id[i] == pid) id[i] = qid;&amp;#10;&amp;#9;&amp;#9;&amp;#125;&amp;#10;&amp;#9;&amp;#125;&amp;#10;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;quick-find is too slow for huge problem !&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;too flat so union is expensive !&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Quick union / lazy approach&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;data structure&lt;/p&gt;
&lt;p&gt; int[] id = new int[]&lt;br&gt; id[i] stores the parent of i&lt;br&gt; root of i is id[id[id[…id[i]…]]]&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;find: check if p and q have the same root –&amp;gt; in the same union&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;union: set the id of p’s root to the id of q’s root&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public class QU&amp;#10;&amp;#123;&amp;#10;&amp;#9;private int[] id;&amp;#10;&amp;#10;&amp;#9;public QU(int N)&amp;#10;&amp;#9;&amp;#123;&amp;#10;&amp;#9;&amp;#9;id = new int[N];&amp;#10;&amp;#9;&amp;#9;for (int i = 0; i &amp;#60; N; i++)&amp;#10;&amp;#9;&amp;#9;&amp;#123;&amp;#10;&amp;#9;&amp;#9;&amp;#9;id[i] = i; // initialize, cost: N&amp;#10;&amp;#9;&amp;#9;&amp;#125;&amp;#10;&amp;#9;&amp;#125;&amp;#10;&amp;#10;&amp;#9;public int root(int i)&amp;#10;&amp;#9;&amp;#123;&amp;#10;&amp;#9;&amp;#9;while (i != id[i])&amp;#10;&amp;#9;&amp;#9;&amp;#123;&amp;#10;&amp;#9;&amp;#9;&amp;#9;i = id[i]; // cost: depth of i&amp;#10;&amp;#9;&amp;#9;&amp;#125;&amp;#10;&amp;#9;&amp;#9;return i;&amp;#10;&amp;#9;&amp;#125;&amp;#10;&amp;#10;&amp;#9;public boolean connected(int p, int q)&amp;#10;&amp;#9;&amp;#123;&amp;#10;&amp;#9;&amp;#9;return root(p) == root(q); // cost: depth of p + depth of q&amp;#10;&amp;#9;&amp;#125;&amp;#10;&amp;#10;&amp;#9;public void union(int p, int q)&amp;#10;&amp;#9;&amp;#123;&amp;#10;&amp;#9;&amp;#9;int i = root(p); // cost: depth of p&amp;#10;&amp;#9;&amp;#9;int j = root(q); // cost: depth of q&amp;#10;&amp;#9;&amp;#9;id[i] = j;&amp;#10;&amp;#9;&amp;#125;&amp;#10;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;too tall so find is expensive !&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Improve Quick-Union&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;weighting to avoid tall trees : put smaller tree lower&lt;/p&gt;
&lt;p&gt; add a size array&lt;/p&gt;
 &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;   public void union(int p, int q)&amp;#10;&amp;#123;&amp;#10;&amp;#9;int i = root(p); // cost: depth of p&amp;#10;&amp;#9;int j = root(q); // cost: depth of q&amp;#10;&amp;#9;if (i == j) return;&amp;#10;&amp;#9;if (size[i] &amp;#60; size[j])&amp;#10;&amp;#9;&amp;#123;&amp;#10;&amp;#9;&amp;#9;id[i] = j;&amp;#10;&amp;#9;&amp;#9;size[j] += size[i];&amp;#10;&amp;#9;&amp;#125;&amp;#10;&amp;#9;else&amp;#10;&amp;#9;&amp;#123;&amp;#10;&amp;#9;&amp;#9;id[j] = i;&amp;#10;&amp;#9;&amp;#9;size[i] += size[j];&amp;#10;&amp;#9;&amp;#125;&amp;#10;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt; union takes constant time, given roots. (log N)&lt;/p&gt;
&lt;p&gt; depth of any node is at most log N.&lt;/p&gt;
&lt;p&gt; find cost log N.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;path compression&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Two - pass: After computing root of p, set id of each examined node to point to that root.&lt;/p&gt;
&lt;p&gt;One - pass: Make every other node in the path pointed to its &lt;strong&gt;grandparent&lt;/strong&gt;.&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public int root(int i)&amp;#10;&amp;#9;&amp;#123;&amp;#10;&amp;#9;&amp;#9;while (i != id[i])&amp;#10;&amp;#9;&amp;#9;&amp;#123;&amp;#10;&amp;#9;&amp;#9;&amp;#9;id[i] = id[id[i]];&amp;#10;&amp;#9;&amp;#9;&amp;#9;i = id[i]; // cost: depth of i&amp;#10;&amp;#9;&amp;#9;&amp;#125;&amp;#10;&amp;#9;&amp;#9;return i;&amp;#10;&amp;#9;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Memory-Usage&quot;&gt;&lt;a href=&quot;#Memory-Usage&quot; class=&quot;headerlink&quot; title=&quot;Memory Usage&quot;&gt;&lt;/a&gt;Memory Usage&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;type&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;bytes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;boolean&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;byte&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;char&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;int&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;float&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;long&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;double&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;8&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;type&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;bytes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;chat[]&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;2N + 24&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;int[]&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;4N + 24&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;double&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;8N + 24&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;type&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;bytes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Object Overhead&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;16&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Reference&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;padding&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;8x&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Union-Find-amp-Memory-Usage-for-Algorithm&quot;&gt;&lt;a href=&quot;#Union-Find-amp-Memory-Usage-for-Algorithm&quot; class=&quot;headerlink&quot; title=&quot;Union-Find &amp;amp; Memory Usage for Algorithm&quot;&gt;&lt;/a&gt;Union-Find &amp;amp; Memory Usage for Algorithm&lt;/h2&gt;&lt;h3 id=&quot;Overview&quot;&gt;&lt;a href=&quot;#Overview&quot; class=&quot;headerlink&quot; title=&quot;Overview&quot;&gt;&lt;/a&gt;Overview&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;algorithm&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;initialize&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;union&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;find&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;quick-find&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;N&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;N&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;1&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;union时loop更新有共同祖先的顶点&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;quick-union&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;N&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;N&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;N&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;union时只需要更新一个顶点的祖先&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;weighted QU&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;N&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;lg N&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;lg N&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;加一个size记录，小树总是连在大树上&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;M union-find operations on a set of N objects:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;algorithm&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;worst-case time&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;quick-find&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;MN&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;quick-union&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;MN&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;weighted QU&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;N + M log N&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;QU + path compression&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;N + M log N&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Weighted QU + path compression&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;N + M log* N&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
      <category term="Tech Notes" scheme="http://victoriahong.com/categories/Tech-Notes/"/>
    
    
      <category term="Algorithms" scheme="http://victoriahong.com/tags/Algorithms/"/>
    
      <category term="Memory" scheme="http://victoriahong.com/tags/Memory/"/>
    
      <category term="Notes" scheme="http://victoriahong.com/tags/Notes/"/>
    
      <category term="Union Find" scheme="http://victoriahong.com/tags/Union-Find/"/>
    
  </entry>
  
  <entry>
    <title>Docker</title>
    <link href="http://victoriahong.com/2016/04/Docker/"/>
    <id>http://victoriahong.com/2016/04/Docker/</id>
    <published>2016-04-21T19:38:04.000Z</published>
    <updated>2016-05-12T04:55:52.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Overview&quot;&gt;&lt;a href=&quot;#Overview&quot; class=&quot;headerlink&quot; title=&quot;Overview&quot;&gt;&lt;/a&gt;Overview&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Docker Structure&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/rVrlbf8.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;Basic-Concept&quot;&gt;&lt;a href=&quot;#Basic-Concept&quot; class=&quot;headerlink&quot; title=&quot;Basic Concept&quot;&gt;&lt;/a&gt;Basic Concept&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;is a platform for developing , shipping and running applications using container virtualization technology&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Traditional solution:&lt;/p&gt;
  &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;app --&amp;#62; OS --&amp;#62; physical sever&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;  Problems: slow; cost; waste; scale; migrate; vendor lock in&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Hypervisor-based Virtualization&lt;/p&gt;
  &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;VM( app --&amp;#62; guest OS )&amp;#10;&amp;#10;VM( app --&amp;#62; guest OS ) --&amp;#62; Hypervisor --&amp;#62; host OS --&amp;#62; physical sever&amp;#10;&amp;#10;VM( app --&amp;#62; guest OS )&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;  Benefits: better resource pooling; scale; VMs in cloud&lt;/p&gt;
&lt;p&gt;  Limitations: VMs need resources&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Container&lt;/p&gt;
&lt;p&gt;  Container based virtualization uses the kernel on the host’s OS to run multiple &lt;strong&gt;guest instances&lt;/strong&gt;(container)&lt;/p&gt;
  &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;container( app )&amp;#10;&amp;#10;container( app ) --&amp;#62; Host OS( OS Kernel ) --&amp;#62; Physicals server&amp;#10;&amp;#10;container( app )&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Container over VM: lightweight; less resource; portability&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Docker&lt;/p&gt;
  &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;container( app )&amp;#10;&amp;#10;container( app ) --&amp;#62; Docker Engine --&amp;#62; Linux OS( Linux Kernel ) --&amp;#62; Physicals server&amp;#10;&amp;#10;container( app )&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;  &lt;strong&gt;Namespace&lt;/strong&gt; is used to support isolated containers&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Docker Client and Daemon&lt;/p&gt;
&lt;p&gt;  client –&amp;gt; Daemon(server)&lt;/p&gt;
&lt;p&gt;  run on same host/diff hosts&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Docker Container and Image&lt;/p&gt;
&lt;p&gt;  image&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;read only template to create containers&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Docker hub or local registry&lt;/p&gt;
&lt;p&gt;Container&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;All resources needed to run the app&lt;/p&gt;
&lt;p&gt;Registry &amp;amp; Repository&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Docker Hub&lt;/strong&gt; is a registry&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Registry contains several repos (repo for ubuntu, for redhat)&lt;/li&gt;
&lt;li&gt;Repo contains several images&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Docker Orchestration&lt;/p&gt;
&lt;p&gt;  Machine/Swarm/Compose&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Benefits: Separation; Fast deployment cycle; Portability; Scalability&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Operations&quot;&gt;&lt;a href=&quot;#Operations&quot; class=&quot;headerlink&quot; title=&quot;Operations&quot;&gt;&lt;/a&gt;Operations&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Show images&lt;/p&gt;
&lt;p&gt;  &lt;code&gt;docker image&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Container ID&lt;/p&gt;
&lt;p&gt;  long ID and short ID&lt;/p&gt;
&lt;p&gt;  &lt;code&gt;docker ps&lt;/code&gt; list containers&lt;/p&gt;
&lt;p&gt;  &lt;code&gt;docker ps -a&lt;/code&gt; list all containers&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Running options&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Running in Detached Mode&lt;/p&gt;
&lt;p&gt;  &lt;code&gt;docker run -d command&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Running a web app inside a container&lt;/p&gt;
&lt;p&gt;  &lt;code&gt;docker run -d -P tomcat:7&lt;/code&gt; map the tomcat ports to the host port randomly(49153 ~ 65535)&lt;/p&gt;
&lt;p&gt;  &lt;code&gt;docker run -d -p 8080:80 nginx:1.7&lt;/code&gt; map 80 on the container to 9090 on the host&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;attach stdin&lt;/p&gt;
&lt;p&gt;  &lt;code&gt;docker run -i&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;pseudo-tty&lt;/p&gt;
&lt;p&gt;  &lt;code&gt;docker run -t&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Commit&lt;br&gt;  &lt;code&gt;docker commit [options] [container ID] [repo: tag]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;  refer to a container by ID or name&lt;/p&gt;
&lt;p&gt;  repo name: username + / + appname&lt;/p&gt;
&lt;p&gt;  default tag: latest&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Building-Image&quot;&gt;&lt;a href=&quot;#Building-Image&quot; class=&quot;headerlink&quot; title=&quot;Building Image&quot;&gt;&lt;/a&gt;Building Image&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Image Layers&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a layer is also just another image&lt;/li&gt;
&lt;li&gt;layers are read only&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Writable Layer&lt;/p&gt;
&lt;p&gt;  all changes are made to the writable layer&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Dockerfile&lt;/p&gt;
&lt;p&gt;  is a configuration file that contains instructions for building a Docker image&lt;/p&gt;
&lt;p&gt;  instructions can be cached automatically&lt;/p&gt;
&lt;p&gt;  &lt;strong&gt;FROM&lt;/strong&gt; base image&lt;/p&gt;
&lt;p&gt;  &lt;code&gt;FROM ubuntu:14.04&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;  &lt;strong&gt;RUN&lt;/strong&gt; specify a command to execute&lt;/p&gt;
&lt;p&gt;  each RUN is a new commit, so we can aggregate multiple RUN instructions&lt;/p&gt;
&lt;p&gt;  &lt;code&gt;RUN apt-get update &amp;amp;&amp;amp; apt-get install vim&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;  &lt;strong&gt;CMD&lt;/strong&gt; defines a default command to execute when a container is created&lt;/p&gt;
&lt;p&gt;  can be specified once in a Dockerfile and can be overridden at runtime&lt;/p&gt;
&lt;p&gt;  shell form: &lt;code&gt;CMD ping 127.0.0.1 -c 30&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;  exec form: &lt;code&gt;CMD [&amp;quot;ping&amp;quot;, &amp;quot;127.0.0.1&amp;quot;, &amp;quot;-c&amp;quot;, &amp;quot;30&amp;quot;]&lt;/code&gt; can pass in parameters at runtime&lt;/p&gt;
&lt;p&gt;  &lt;strong&gt;ENTRYPOINT&lt;/strong&gt; can’t be overridden at runtime&lt;/p&gt;
&lt;p&gt;  &lt;code&gt;ENTRYPOINT [&amp;quot;ping&amp;quot;]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;  &lt;strong&gt;VOLUME&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;  &lt;code&gt;VOLUME /directory&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;  &lt;code&gt;VOLUME /www/website1.com /www/website2.com&lt;/code&gt; multiple volumes&lt;/p&gt;
&lt;p&gt;  can’t map volumes to host directories&lt;/p&gt;
&lt;p&gt;  &lt;strong&gt;EXPOSE&lt;/strong&gt; configure which port a container will listen on at runtime&lt;/p&gt;
&lt;p&gt;  &lt;code&gt;EXPOSE 80 443&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Docker Build&lt;/p&gt;
&lt;p&gt;  &lt;code&gt;docker build [options] [path]&lt;/code&gt; path is build context(including all resource files)&lt;/p&gt;
&lt;p&gt;  &lt;code&gt;docker build -t [repo:tag] [path]&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Start and Stop Containers&lt;/p&gt;
&lt;p&gt;  &lt;code&gt;docker ps -a&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;  &lt;code&gt;docker start &amp;lt;container ID or name&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;  &lt;code&gt;docker stop &amp;lt;container ID or name&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Getting terminal access&lt;/p&gt;
&lt;p&gt;  &lt;code&gt;docker exec&lt;/code&gt; to start another process within a container&lt;/p&gt;
&lt;p&gt;  &lt;code&gt;docker exec -it [container ID] /bin/bash&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;  &lt;code&gt;ps -ef&lt;/code&gt; to see existing processes in this container&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Delete Container&lt;/p&gt;
&lt;p&gt;   &lt;code&gt;docker stop&lt;/code&gt;&lt;br&gt;   &lt;code&gt;docker rm [container ID]&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Delete local images&lt;/p&gt;
&lt;p&gt;  &lt;code&gt;docker rmi [image ID]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;  &lt;code&gt;docker rmi [repo:tag]&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Push image to docker hub&lt;/p&gt;
&lt;p&gt;  &lt;code&gt;docker push [repo:tag]&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Volumes&quot;&gt;&lt;a href=&quot;#Volumes&quot; class=&quot;headerlink&quot; title=&quot;Volumes&quot;&gt;&lt;/a&gt;Volumes&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;is a designated directory in a container, which is designed to persist data, independent of the container’s life cycle&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;persist when a container is deleted&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Mount a Volume&lt;/p&gt;
&lt;p&gt;  &lt;code&gt;docker run -i -t -v /data/src:/test/src nginx:1.7&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;  execute a new container and map the /data/src  folder from the host into the /test/src folder in the container&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Networking-Basics&quot;&gt;&lt;a href=&quot;#Networking-Basics&quot; class=&quot;headerlink&quot; title=&quot;Networking Basics&quot;&gt;&lt;/a&gt;Networking Basics&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;EXPOSE&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Link Containers&lt;/p&gt;
&lt;p&gt;  &lt;code&gt;docker run -d --name database postgres&lt;/code&gt; create the source container first&lt;/p&gt;
&lt;p&gt;  &lt;code&gt;docker run -d -p --name website -- link database:db nginx&lt;/code&gt; create the recipient container&lt;/p&gt;
&lt;p&gt;  db is alias for database&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Bittiger讲解&quot;&gt;&lt;a href=&quot;#Bittiger讲解&quot; class=&quot;headerlink&quot; title=&quot;Bittiger讲解&quot;&gt;&lt;/a&gt;Bittiger讲解&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;union file system:&lt;/p&gt;
&lt;p&gt;  上层会覆盖下层的文件。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;copy on write:&lt;/p&gt;
&lt;p&gt;  需要改什么文件，就从下层拿什么文件上来。但所有的修改都隔离的，一旦container删了，东西就都丢了。可以用volume映射。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Docker use namespace to achieve isolation&lt;/p&gt;
&lt;p&gt;  避免资源竞争&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Docker use control group to achieve resource limiting&lt;/p&gt;
&lt;p&gt;  linux kernel functionality&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;runC&lt;/p&gt;
&lt;p&gt; an abstraction layer between Docker Driver anD Linux kernel&lt;/p&gt;
&lt;p&gt;it interfaces with Linux kernel functionalities&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Overview&quot;&gt;&lt;a href=&quot;#Overview&quot; class=&quot;headerlink&quot; title=&quot;Overview&quot;&gt;&lt;/a&gt;Overview&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Docker Structure&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/rVrlbf8.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Tech Notes" scheme="http://victoriahong.com/categories/Tech-Notes/"/>
    
    
      <category term="Docker" scheme="http://victoriahong.com/tags/Docker/"/>
    
      <category term="Notes" scheme="http://victoriahong.com/tags/Notes/"/>
    
  </entry>
  
</feed>
